
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.0
 * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
 */
Prisma.prismaVersion = {
  client: "5.7.0",
  engine: "79fb5193cf0a8fdbef536e4b4a159cad677ab1b9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  username: 'username',
  email: 'email',
  password: 'password'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  validId: 'validId',
  selfieId: 'selfieId',
  fullname: 'fullname',
  username: 'username',
  email: 'email',
  password: 'password',
  contact: 'contact',
  facebookLink: 'facebookLink',
  petowner: 'petowner',
  address: 'address',
  accountStatus: 'accountStatus',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  content: 'content',
  sender: 'sender',
  recipient: 'recipient',
  timestamp: 'timestamp',
  status: 'status',
  link: 'link',
  metadata: 'metadata'
};

exports.Prisma.PetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  breed: 'breed',
  age: 'age',
  color: 'color',
  gender: 'gender',
  description: 'description',
  petType: 'petType',
  image: 'image',
  image2: 'image2',
  image3: 'image3',
  image4: 'image4',
  adopter: 'adopter',
  adopted: 'adopted'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  completeLocation: 'completeLocation',
  landmark: 'landmark',
  petstatus: 'petstatus',
  email: 'email',
  phone: 'phone',
  petImage: 'petImage',
  message: 'message',
  archived: 'archived',
  reportstatus: 'reportstatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  status: 'status'
};

exports.Prisma.SurrenderScalarFieldEnum = {
  id: 'id',
  email: 'email',
  date: 'date',
  ownerName: 'ownerName',
  contact: 'contact',
  fullAddress: 'fullAddress',
  petType: 'petType',
  petName: 'petName',
  dateOfBirth: 'dateOfBirth',
  breed: 'breed',
  color: 'color',
  sex: 'sex',
  spayedNeutered: 'spayedNeutered',
  vaccinated: 'vaccinated',
  medicalConcerns: 'medicalConcerns',
  currentMedicalIssues: 'currentMedicalIssues',
  aggression: 'aggression',
  biting: 'biting',
  leashCageTrained: 'leashCageTrained',
  goodWithOtherPets: 'goodWithOtherPets',
  goodWithChildren: 'goodWithChildren',
  indoorOutdoor: 'indoorOutdoor',
  paymentMethod: 'paymentMethod',
  agreementAccepted: 'agreementAccepted',
  validId: 'validId',
  selfie: 'selfie',
  petpic: 'petpic',
  archived: 'archived',
  userId: 'userId',
  status: 'status'
};

exports.Prisma.ContactFormEntryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdoptionScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  petType: 'petType',
  petName: 'petName',
  existingPets: 'existingPets',
  visitDate: 'visitDate',
  agreeToAdopt: 'agreeToAdopt',
  promiseToCare: 'promiseToCare',
  acceptTerms: 'acceptTerms',
  address: 'address',
  contactNumber: 'contactNumber',
  contractDate: 'contractDate',
  facebookLink: 'facebookLink',
  validId: 'validId',
  petStayingPhoto: 'petStayingPhoto',
  selfie: 'selfie',
  archived: 'archived',
  petId: 'petId',
  userId: 'userId',
  status: 'status'
};

exports.Prisma.PetRequestScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  contactNumber: 'contactNumber',
  date: 'date',
  type: 'type',
  breed: 'breed',
  sex: 'sex',
  color: 'color',
  agePreference: 'agePreference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archived: 'archived',
  userId: 'userId',
  status: 'status'
};

exports.Prisma.AdoptScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  breed: 'breed',
  adopter: 'adopter',
  address: 'address',
  contact: 'contact',
  date: 'date'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  amount: 'amount',
  reference: 'reference',
  payment: 'payment'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Admin: 'Admin',
  User: 'User',
  Notification: 'Notification',
  Pet: 'Pet',
  Report: 'Report',
  Surrender: 'Surrender',
  ContactFormEntry: 'ContactFormEntry',
  Adoption: 'Adoption',
  PetRequest: 'PetRequest',
  Adopt: 'Adopt',
  Donation: 'Donation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
