
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Pet
 * 
 */
export type Pet = $Result.DefaultSelection<Prisma.$PetPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model Surrender
 * 
 */
export type Surrender = $Result.DefaultSelection<Prisma.$SurrenderPayload>
/**
 * Model ContactFormEntry
 * 
 */
export type ContactFormEntry = $Result.DefaultSelection<Prisma.$ContactFormEntryPayload>
/**
 * Model Adoption
 * 
 */
export type Adoption = $Result.DefaultSelection<Prisma.$AdoptionPayload>
/**
 * Model PetRequest
 * 
 */
export type PetRequest = $Result.DefaultSelection<Prisma.$PetRequestPayload>
/**
 * Model Adopt
 * 
 */
export type Adopt = $Result.DefaultSelection<Prisma.$AdoptPayload>
/**
 * Model Donation
 * 
 */
export type Donation = $Result.DefaultSelection<Prisma.$DonationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.pet`: Exposes CRUD operations for the **Pet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pet.findMany()
    * ```
    */
  get pet(): Prisma.PetDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.surrender`: Exposes CRUD operations for the **Surrender** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surrenders
    * const surrenders = await prisma.surrender.findMany()
    * ```
    */
  get surrender(): Prisma.SurrenderDelegate<ExtArgs>;

  /**
   * `prisma.contactFormEntry`: Exposes CRUD operations for the **ContactFormEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactFormEntries
    * const contactFormEntries = await prisma.contactFormEntry.findMany()
    * ```
    */
  get contactFormEntry(): Prisma.ContactFormEntryDelegate<ExtArgs>;

  /**
   * `prisma.adoption`: Exposes CRUD operations for the **Adoption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adoptions
    * const adoptions = await prisma.adoption.findMany()
    * ```
    */
  get adoption(): Prisma.AdoptionDelegate<ExtArgs>;

  /**
   * `prisma.petRequest`: Exposes CRUD operations for the **PetRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PetRequests
    * const petRequests = await prisma.petRequest.findMany()
    * ```
    */
  get petRequest(): Prisma.PetRequestDelegate<ExtArgs>;

  /**
   * `prisma.adopt`: Exposes CRUD operations for the **Adopt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adopts
    * const adopts = await prisma.adopt.findMany()
    * ```
    */
  get adopt(): Prisma.AdoptDelegate<ExtArgs>;

  /**
   * `prisma.donation`: Exposes CRUD operations for the **Donation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donations
    * const donations = await prisma.donation.findMany()
    * ```
    */
  get donation(): Prisma.DonationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.0
   * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    User: 'User',
    Notification: 'Notification',
    Pet: 'Pet',
    Report: 'Report',
    Surrender: 'Surrender',
    ContactFormEntry: 'ContactFormEntry',
    Adoption: 'Adoption',
    PetRequest: 'PetRequest',
    Adopt: 'Adopt',
    Donation: 'Donation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'admin' | 'user' | 'notification' | 'pet' | 'report' | 'surrender' | 'contactFormEntry' | 'adoption' | 'petRequest' | 'adopt' | 'donation'
      txIsolationLevel: never
    },
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AdminFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AdminAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.NotificationFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.NotificationAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Pet: {
        payload: Prisma.$PetPayload<ExtArgs>
        fields: Prisma.PetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findFirst: {
            args: Prisma.PetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findMany: {
            args: Prisma.PetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>[]
          }
          create: {
            args: Prisma.PetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          createMany: {
            args: Prisma.PetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          update: {
            args: Prisma.PetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          deleteMany: {
            args: Prisma.PetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          aggregate: {
            args: Prisma.PetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePet>
          }
          groupBy: {
            args: Prisma.PetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PetGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PetFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.PetAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.PetCountArgs<ExtArgs>,
            result: $Utils.Optional<PetCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReportFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReportAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>,
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      Surrender: {
        payload: Prisma.$SurrenderPayload<ExtArgs>
        fields: Prisma.SurrenderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurrenderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurrenderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>
          }
          findFirst: {
            args: Prisma.SurrenderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurrenderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>
          }
          findMany: {
            args: Prisma.SurrenderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>[]
          }
          create: {
            args: Prisma.SurrenderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>
          }
          createMany: {
            args: Prisma.SurrenderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SurrenderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>
          }
          update: {
            args: Prisma.SurrenderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>
          }
          deleteMany: {
            args: Prisma.SurrenderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SurrenderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SurrenderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SurrenderPayload>
          }
          aggregate: {
            args: Prisma.SurrenderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSurrender>
          }
          groupBy: {
            args: Prisma.SurrenderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SurrenderGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SurrenderFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.SurrenderAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.SurrenderCountArgs<ExtArgs>,
            result: $Utils.Optional<SurrenderCountAggregateOutputType> | number
          }
        }
      }
      ContactFormEntry: {
        payload: Prisma.$ContactFormEntryPayload<ExtArgs>
        fields: Prisma.ContactFormEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFormEntryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFormEntryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>
          }
          findFirst: {
            args: Prisma.ContactFormEntryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFormEntryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>
          }
          findMany: {
            args: Prisma.ContactFormEntryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>[]
          }
          create: {
            args: Prisma.ContactFormEntryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>
          }
          createMany: {
            args: Prisma.ContactFormEntryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContactFormEntryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>
          }
          update: {
            args: Prisma.ContactFormEntryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>
          }
          deleteMany: {
            args: Prisma.ContactFormEntryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactFormEntryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactFormEntryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactFormEntryPayload>
          }
          aggregate: {
            args: Prisma.ContactFormEntryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContactFormEntry>
          }
          groupBy: {
            args: Prisma.ContactFormEntryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactFormEntryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ContactFormEntryFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ContactFormEntryAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ContactFormEntryCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactFormEntryCountAggregateOutputType> | number
          }
        }
      }
      Adoption: {
        payload: Prisma.$AdoptionPayload<ExtArgs>
        fields: Prisma.AdoptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdoptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdoptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>
          }
          findFirst: {
            args: Prisma.AdoptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdoptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>
          }
          findMany: {
            args: Prisma.AdoptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>[]
          }
          create: {
            args: Prisma.AdoptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>
          }
          createMany: {
            args: Prisma.AdoptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdoptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>
          }
          update: {
            args: Prisma.AdoptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>
          }
          deleteMany: {
            args: Prisma.AdoptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdoptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdoptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptionPayload>
          }
          aggregate: {
            args: Prisma.AdoptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdoption>
          }
          groupBy: {
            args: Prisma.AdoptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdoptionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AdoptionFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AdoptionAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AdoptionCountArgs<ExtArgs>,
            result: $Utils.Optional<AdoptionCountAggregateOutputType> | number
          }
        }
      }
      PetRequest: {
        payload: Prisma.$PetRequestPayload<ExtArgs>
        fields: Prisma.PetRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>
          }
          findFirst: {
            args: Prisma.PetRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>
          }
          findMany: {
            args: Prisma.PetRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>[]
          }
          create: {
            args: Prisma.PetRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>
          }
          createMany: {
            args: Prisma.PetRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PetRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>
          }
          update: {
            args: Prisma.PetRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>
          }
          deleteMany: {
            args: Prisma.PetRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PetRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PetRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetRequestPayload>
          }
          aggregate: {
            args: Prisma.PetRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePetRequest>
          }
          groupBy: {
            args: Prisma.PetRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PetRequestGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PetRequestFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.PetRequestAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.PetRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<PetRequestCountAggregateOutputType> | number
          }
        }
      }
      Adopt: {
        payload: Prisma.$AdoptPayload<ExtArgs>
        fields: Prisma.AdoptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdoptFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdoptFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>
          }
          findFirst: {
            args: Prisma.AdoptFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdoptFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>
          }
          findMany: {
            args: Prisma.AdoptFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>[]
          }
          create: {
            args: Prisma.AdoptCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>
          }
          createMany: {
            args: Prisma.AdoptCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdoptDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>
          }
          update: {
            args: Prisma.AdoptUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>
          }
          deleteMany: {
            args: Prisma.AdoptDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdoptUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdoptUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdoptPayload>
          }
          aggregate: {
            args: Prisma.AdoptAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdopt>
          }
          groupBy: {
            args: Prisma.AdoptGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdoptGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AdoptFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AdoptAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AdoptCountArgs<ExtArgs>,
            result: $Utils.Optional<AdoptCountAggregateOutputType> | number
          }
        }
      }
      Donation: {
        payload: Prisma.$DonationPayload<ExtArgs>
        fields: Prisma.DonationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DonationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DonationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>
          }
          findFirst: {
            args: Prisma.DonationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DonationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>
          }
          findMany: {
            args: Prisma.DonationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>[]
          }
          create: {
            args: Prisma.DonationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>
          }
          createMany: {
            args: Prisma.DonationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DonationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>
          }
          update: {
            args: Prisma.DonationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>
          }
          deleteMany: {
            args: Prisma.DonationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DonationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DonationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DonationPayload>
          }
          aggregate: {
            args: Prisma.DonationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDonation>
          }
          groupBy: {
            args: Prisma.DonationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DonationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DonationFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.DonationAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.DonationCountArgs<ExtArgs>,
            result: $Utils.Optional<DonationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    fullname: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    email?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    email?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    fullname: string | null
    username: string
    email: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string | null
      username: string
      email: string
      password: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * @param {AdminFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const admin = await prisma.admin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdminFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Admin.
     * @param {AdminAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const admin = await prisma.admin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdminAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly fullname: FieldRef<"Admin", 'String'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin findRaw
   */
  export type AdminFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Admin aggregateRaw
   */
  export type AdminAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    validId: string | null
    selfieId: string | null
    fullname: string | null
    username: string | null
    email: string | null
    password: string | null
    contact: string | null
    facebookLink: string | null
    petowner: string | null
    address: string | null
    accountStatus: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    validId: string | null
    selfieId: string | null
    fullname: string | null
    username: string | null
    email: string | null
    password: string | null
    contact: string | null
    facebookLink: string | null
    petowner: string | null
    address: string | null
    accountStatus: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    validId: number
    selfieId: number
    fullname: number
    username: number
    email: number
    password: number
    contact: number
    facebookLink: number
    petowner: number
    address: number
    accountStatus: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    validId?: true
    selfieId?: true
    fullname?: true
    username?: true
    email?: true
    password?: true
    contact?: true
    facebookLink?: true
    petowner?: true
    address?: true
    accountStatus?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    validId?: true
    selfieId?: true
    fullname?: true
    username?: true
    email?: true
    password?: true
    contact?: true
    facebookLink?: true
    petowner?: true
    address?: true
    accountStatus?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    validId?: true
    selfieId?: true
    fullname?: true
    username?: true
    email?: true
    password?: true
    contact?: true
    facebookLink?: true
    petowner?: true
    address?: true
    accountStatus?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    validId: string | null
    selfieId: string | null
    fullname: string | null
    username: string
    email: string
    password: string
    contact: string | null
    facebookLink: string | null
    petowner: string | null
    address: string | null
    accountStatus: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    validId?: boolean
    selfieId?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    contact?: boolean
    facebookLink?: boolean
    petowner?: boolean
    address?: boolean
    accountStatus?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    validId?: boolean
    selfieId?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    contact?: boolean
    facebookLink?: boolean
    petowner?: boolean
    address?: boolean
    accountStatus?: boolean
    createdAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      validId: string | null
      selfieId: string | null
      fullname: string | null
      username: string
      email: string
      password: string
      contact: string | null
      facebookLink: string | null
      petowner: string | null
      address: string | null
      accountStatus: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly validId: FieldRef<"User", 'String'>
    readonly selfieId: FieldRef<"User", 'String'>
    readonly fullname: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly contact: FieldRef<"User", 'String'>
    readonly facebookLink: FieldRef<"User", 'String'>
    readonly petowner: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly accountStatus: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    content: string | null
    sender: string | null
    recipient: string | null
    timestamp: Date | null
    status: string | null
    link: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    content: string | null
    sender: string | null
    recipient: string | null
    timestamp: Date | null
    status: string | null
    link: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    content: number
    sender: number
    recipient: number
    timestamp: number
    status: number
    link: number
    metadata: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    content?: true
    sender?: true
    recipient?: true
    timestamp?: true
    status?: true
    link?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    content?: true
    sender?: true
    recipient?: true
    timestamp?: true
    status?: true
    link?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    content?: true
    sender?: true
    recipient?: true
    timestamp?: true
    status?: true
    link?: true
    metadata?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string | null
    type: string | null
    content: string | null
    sender: string | null
    recipient: string | null
    timestamp: Date
    status: string | null
    link: string | null
    metadata: JsonValue | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    content?: boolean
    sender?: boolean
    recipient?: boolean
    timestamp?: boolean
    status?: boolean
    link?: boolean
    metadata?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    content?: boolean
    sender?: boolean
    recipient?: boolean
    timestamp?: boolean
    status?: boolean
    link?: boolean
    metadata?: boolean
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      type: string | null
      content: string | null
      sender: string | null
      recipient: string | null
      timestamp: Date
      status: string | null
      link: string | null
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * @param {NotificationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const notification = await prisma.notification.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: NotificationFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Notification.
     * @param {NotificationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const notification = await prisma.notification.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: NotificationAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly sender: FieldRef<"Notification", 'String'>
    readonly recipient: FieldRef<"Notification", 'String'>
    readonly timestamp: FieldRef<"Notification", 'DateTime'>
    readonly status: FieldRef<"Notification", 'String'>
    readonly link: FieldRef<"Notification", 'String'>
    readonly metadata: FieldRef<"Notification", 'Json'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data?: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification findRaw
   */
  export type NotificationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Notification aggregateRaw
   */
  export type NotificationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
  }



  /**
   * Model Pet
   */

  export type AggregatePet = {
    _count: PetCountAggregateOutputType | null
    _avg: PetAvgAggregateOutputType | null
    _sum: PetSumAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  export type PetAvgAggregateOutputType = {
    age: number | null
  }

  export type PetSumAggregateOutputType = {
    age: number | null
  }

  export type PetMinAggregateOutputType = {
    id: string | null
    name: string | null
    breed: string | null
    age: number | null
    color: string | null
    gender: string | null
    description: string | null
    petType: string | null
    image: string | null
    image2: string | null
    image3: string | null
    image4: string | null
    adopter: string | null
    adopted: boolean | null
  }

  export type PetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    breed: string | null
    age: number | null
    color: string | null
    gender: string | null
    description: string | null
    petType: string | null
    image: string | null
    image2: string | null
    image3: string | null
    image4: string | null
    adopter: string | null
    adopted: boolean | null
  }

  export type PetCountAggregateOutputType = {
    id: number
    name: number
    breed: number
    age: number
    color: number
    gender: number
    description: number
    petType: number
    image: number
    image2: number
    image3: number
    image4: number
    adopter: number
    adopted: number
    _all: number
  }


  export type PetAvgAggregateInputType = {
    age?: true
  }

  export type PetSumAggregateInputType = {
    age?: true
  }

  export type PetMinAggregateInputType = {
    id?: true
    name?: true
    breed?: true
    age?: true
    color?: true
    gender?: true
    description?: true
    petType?: true
    image?: true
    image2?: true
    image3?: true
    image4?: true
    adopter?: true
    adopted?: true
  }

  export type PetMaxAggregateInputType = {
    id?: true
    name?: true
    breed?: true
    age?: true
    color?: true
    gender?: true
    description?: true
    petType?: true
    image?: true
    image2?: true
    image3?: true
    image4?: true
    adopter?: true
    adopted?: true
  }

  export type PetCountAggregateInputType = {
    id?: true
    name?: true
    breed?: true
    age?: true
    color?: true
    gender?: true
    description?: true
    petType?: true
    image?: true
    image2?: true
    image3?: true
    image4?: true
    adopter?: true
    adopted?: true
    _all?: true
  }

  export type PetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pet to aggregate.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pets
    **/
    _count?: true | PetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetMaxAggregateInputType
  }

  export type GetPetAggregateType<T extends PetAggregateArgs> = {
        [P in keyof T & keyof AggregatePet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePet[P]>
      : GetScalarType<T[P], AggregatePet[P]>
  }




  export type PetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
    orderBy?: PetOrderByWithAggregationInput | PetOrderByWithAggregationInput[]
    by: PetScalarFieldEnum[] | PetScalarFieldEnum
    having?: PetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetCountAggregateInputType | true
    _avg?: PetAvgAggregateInputType
    _sum?: PetSumAggregateInputType
    _min?: PetMinAggregateInputType
    _max?: PetMaxAggregateInputType
  }

  export type PetGroupByOutputType = {
    id: string
    name: string
    breed: string
    age: number
    color: string
    gender: string
    description: string | null
    petType: string | null
    image: string | null
    image2: string | null
    image3: string | null
    image4: string | null
    adopter: string | null
    adopted: boolean
    _count: PetCountAggregateOutputType | null
    _avg: PetAvgAggregateOutputType | null
    _sum: PetSumAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  type GetPetGroupByPayload<T extends PetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetGroupByOutputType[P]>
            : GetScalarType<T[P], PetGroupByOutputType[P]>
        }
      >
    >


  export type PetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    breed?: boolean
    age?: boolean
    color?: boolean
    gender?: boolean
    description?: boolean
    petType?: boolean
    image?: boolean
    image2?: boolean
    image3?: boolean
    image4?: boolean
    adopter?: boolean
    adopted?: boolean
  }, ExtArgs["result"]["pet"]>

  export type PetSelectScalar = {
    id?: boolean
    name?: boolean
    breed?: boolean
    age?: boolean
    color?: boolean
    gender?: boolean
    description?: boolean
    petType?: boolean
    image?: boolean
    image2?: boolean
    image3?: boolean
    image4?: boolean
    adopter?: boolean
    adopted?: boolean
  }


  export type $PetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pet"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      breed: string
      age: number
      color: string
      gender: string
      description: string | null
      petType: string | null
      image: string | null
      image2: string | null
      image3: string | null
      image4: string | null
      adopter: string | null
      adopted: boolean
    }, ExtArgs["result"]["pet"]>
    composites: {}
  }


  type PetGetPayload<S extends boolean | null | undefined | PetDefaultArgs> = $Result.GetResult<Prisma.$PetPayload, S>

  type PetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PetFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PetCountAggregateInputType | true
    }

  export interface PetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pet'], meta: { name: 'Pet' } }
    /**
     * Find zero or one Pet that matches the filter.
     * @param {PetFindUniqueArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PetFindUniqueArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PetFindUniqueOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindFirstArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pet.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petWithIdOnly = await prisma.pet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pet.
     * @param {PetCreateArgs} args - Arguments to create a Pet.
     * @example
     * // Create one Pet
     * const Pet = await prisma.pet.create({
     *   data: {
     *     // ... data to create a Pet
     *   }
     * })
     * 
    **/
    create<T extends PetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PetCreateArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pets.
     *     @param {PetCreateManyArgs} args - Arguments to create many Pets.
     *     @example
     *     // Create many Pets
     *     const pet = await prisma.pet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pet.
     * @param {PetDeleteArgs} args - Arguments to delete one Pet.
     * @example
     * // Delete one Pet
     * const Pet = await prisma.pet.delete({
     *   where: {
     *     // ... filter to delete one Pet
     *   }
     * })
     * 
    **/
    delete<T extends PetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PetDeleteArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pet.
     * @param {PetUpdateArgs} args - Arguments to update one Pet.
     * @example
     * // Update one Pet
     * const pet = await prisma.pet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpdateArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pets.
     * @param {PetDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pet = await prisma.pet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pet.
     * @param {PetUpsertArgs} args - Arguments to update or create a Pet.
     * @example
     * // Update or create a Pet
     * const pet = await prisma.pet.upsert({
     *   create: {
     *     // ... data to create a Pet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pet we want to update
     *   }
     * })
    **/
    upsert<T extends PetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpsertArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Pets that matches the filter.
     * @param {PetFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const pet = await prisma.pet.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PetFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Pet.
     * @param {PetAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const pet = await prisma.pet.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PetAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pet.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends PetCountArgs>(
      args?: Subset<T, PetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetAggregateArgs>(args: Subset<T, PetAggregateArgs>): Prisma.PrismaPromise<GetPetAggregateType<T>>

    /**
     * Group by Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetGroupByArgs['orderBy'] }
        : { orderBy?: PetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pet model
   */
  readonly fields: PetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pet model
   */ 
  interface PetFieldRefs {
    readonly id: FieldRef<"Pet", 'String'>
    readonly name: FieldRef<"Pet", 'String'>
    readonly breed: FieldRef<"Pet", 'String'>
    readonly age: FieldRef<"Pet", 'Int'>
    readonly color: FieldRef<"Pet", 'String'>
    readonly gender: FieldRef<"Pet", 'String'>
    readonly description: FieldRef<"Pet", 'String'>
    readonly petType: FieldRef<"Pet", 'String'>
    readonly image: FieldRef<"Pet", 'String'>
    readonly image2: FieldRef<"Pet", 'String'>
    readonly image3: FieldRef<"Pet", 'String'>
    readonly image4: FieldRef<"Pet", 'String'>
    readonly adopter: FieldRef<"Pet", 'String'>
    readonly adopted: FieldRef<"Pet", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Pet findUnique
   */
  export type PetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet findUniqueOrThrow
   */
  export type PetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet findFirst
   */
  export type PetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * Pet findFirstOrThrow
   */
  export type PetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * Pet findMany
   */
  export type PetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Filter, which Pets to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * Pet create
   */
  export type PetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * The data needed to create a Pet.
     */
    data: XOR<PetCreateInput, PetUncheckedCreateInput>
  }


  /**
   * Pet createMany
   */
  export type PetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pets.
     */
    data: PetCreateManyInput | PetCreateManyInput[]
  }


  /**
   * Pet update
   */
  export type PetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * The data needed to update a Pet.
     */
    data: XOR<PetUpdateInput, PetUncheckedUpdateInput>
    /**
     * Choose, which Pet to update.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet updateMany
   */
  export type PetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pets.
     */
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     */
    where?: PetWhereInput
  }


  /**
   * Pet upsert
   */
  export type PetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * The filter to search for the Pet to update in case it exists.
     */
    where: PetWhereUniqueInput
    /**
     * In case the Pet found by the `where` argument doesn't exist, create a new Pet with this data.
     */
    create: XOR<PetCreateInput, PetUncheckedCreateInput>
    /**
     * In case the Pet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetUpdateInput, PetUncheckedUpdateInput>
  }


  /**
   * Pet delete
   */
  export type PetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Filter which Pet to delete.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet deleteMany
   */
  export type PetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pets to delete
     */
    where?: PetWhereInput
  }


  /**
   * Pet findRaw
   */
  export type PetFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Pet aggregateRaw
   */
  export type PetAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Pet without action
   */
  export type PetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
  }



  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    completeLocation: string | null
    landmark: string | null
    petstatus: string | null
    email: string | null
    phone: string | null
    petImage: string | null
    message: string | null
    archived: boolean | null
    reportstatus: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    status: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    completeLocation: string | null
    landmark: string | null
    petstatus: string | null
    email: string | null
    phone: string | null
    petImage: string | null
    message: string | null
    archived: boolean | null
    reportstatus: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    status: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    completeLocation: number
    landmark: number
    petstatus: number
    email: number
    phone: number
    petImage: number
    message: number
    archived: number
    reportstatus: number
    createdAt: number
    updatedAt: number
    userId: number
    status: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    id?: true
    completeLocation?: true
    landmark?: true
    petstatus?: true
    email?: true
    phone?: true
    petImage?: true
    message?: true
    archived?: true
    reportstatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    status?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    completeLocation?: true
    landmark?: true
    petstatus?: true
    email?: true
    phone?: true
    petImage?: true
    message?: true
    archived?: true
    reportstatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    status?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    completeLocation?: true
    landmark?: true
    petstatus?: true
    email?: true
    phone?: true
    petImage?: true
    message?: true
    archived?: true
    reportstatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    status?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    completeLocation: string
    landmark: string
    petstatus: string
    email: string
    phone: string
    petImage: string | null
    message: string
    archived: boolean
    reportstatus: boolean
    createdAt: Date
    updatedAt: Date
    userId: string
    status: string | null
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    completeLocation?: boolean
    landmark?: boolean
    petstatus?: boolean
    email?: boolean
    phone?: boolean
    petImage?: boolean
    message?: boolean
    archived?: boolean
    reportstatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    status?: boolean
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    completeLocation?: boolean
    landmark?: boolean
    petstatus?: boolean
    email?: boolean
    phone?: boolean
    petImage?: boolean
    message?: boolean
    archived?: boolean
    reportstatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    status?: boolean
  }


  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      completeLocation: string
      landmark: string
      petstatus: string
      email: string
      phone: string
      petImage: string | null
      message: string
      archived: boolean
      reportstatus: boolean
      createdAt: Date
      updatedAt: Date
      userId: string
      status: string | null
    }, ExtArgs["result"]["report"]>
    composites: {}
  }


  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReportFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReportFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReportFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
    **/
    create<T extends ReportCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReportCreateArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reports.
     *     @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     *     @example
     *     // Create many Reports
     *     const report = await prisma.report.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReportCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
    **/
    delete<T extends ReportDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReportUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReportDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReportUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
    **/
    upsert<T extends ReportUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * @param {ReportFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const report = await prisma.report.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ReportFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Report.
     * @param {ReportAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const report = await prisma.report.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ReportAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly completeLocation: FieldRef<"Report", 'String'>
    readonly landmark: FieldRef<"Report", 'String'>
    readonly petstatus: FieldRef<"Report", 'String'>
    readonly email: FieldRef<"Report", 'String'>
    readonly phone: FieldRef<"Report", 'String'>
    readonly petImage: FieldRef<"Report", 'String'>
    readonly message: FieldRef<"Report", 'String'>
    readonly archived: FieldRef<"Report", 'Boolean'>
    readonly reportstatus: FieldRef<"Report", 'Boolean'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
    readonly userId: FieldRef<"Report", 'String'>
    readonly status: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }


  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
  }


  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }


  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }


  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }


  /**
   * Report findRaw
   */
  export type ReportFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Report aggregateRaw
   */
  export type ReportAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
  }



  /**
   * Model Surrender
   */

  export type AggregateSurrender = {
    _count: SurrenderCountAggregateOutputType | null
    _min: SurrenderMinAggregateOutputType | null
    _max: SurrenderMaxAggregateOutputType | null
  }

  export type SurrenderMinAggregateOutputType = {
    id: string | null
    email: string | null
    date: Date | null
    ownerName: string | null
    contact: string | null
    fullAddress: string | null
    petType: string | null
    petName: string | null
    dateOfBirth: Date | null
    breed: string | null
    color: string | null
    sex: string | null
    spayedNeutered: string | null
    vaccinated: string | null
    medicalConcerns: string | null
    currentMedicalIssues: string | null
    aggression: string | null
    biting: string | null
    leashCageTrained: string | null
    goodWithOtherPets: string | null
    goodWithChildren: string | null
    indoorOutdoor: string | null
    paymentMethod: string | null
    agreementAccepted: boolean | null
    validId: string | null
    selfie: string | null
    petpic: string | null
    archived: boolean | null
    userId: string | null
    status: string | null
  }

  export type SurrenderMaxAggregateOutputType = {
    id: string | null
    email: string | null
    date: Date | null
    ownerName: string | null
    contact: string | null
    fullAddress: string | null
    petType: string | null
    petName: string | null
    dateOfBirth: Date | null
    breed: string | null
    color: string | null
    sex: string | null
    spayedNeutered: string | null
    vaccinated: string | null
    medicalConcerns: string | null
    currentMedicalIssues: string | null
    aggression: string | null
    biting: string | null
    leashCageTrained: string | null
    goodWithOtherPets: string | null
    goodWithChildren: string | null
    indoorOutdoor: string | null
    paymentMethod: string | null
    agreementAccepted: boolean | null
    validId: string | null
    selfie: string | null
    petpic: string | null
    archived: boolean | null
    userId: string | null
    status: string | null
  }

  export type SurrenderCountAggregateOutputType = {
    id: number
    email: number
    date: number
    ownerName: number
    contact: number
    fullAddress: number
    petType: number
    petName: number
    dateOfBirth: number
    breed: number
    color: number
    sex: number
    spayedNeutered: number
    vaccinated: number
    medicalConcerns: number
    currentMedicalIssues: number
    aggression: number
    biting: number
    leashCageTrained: number
    goodWithOtherPets: number
    goodWithChildren: number
    indoorOutdoor: number
    paymentMethod: number
    agreementAccepted: number
    validId: number
    selfie: number
    petpic: number
    archived: number
    userId: number
    status: number
    _all: number
  }


  export type SurrenderMinAggregateInputType = {
    id?: true
    email?: true
    date?: true
    ownerName?: true
    contact?: true
    fullAddress?: true
    petType?: true
    petName?: true
    dateOfBirth?: true
    breed?: true
    color?: true
    sex?: true
    spayedNeutered?: true
    vaccinated?: true
    medicalConcerns?: true
    currentMedicalIssues?: true
    aggression?: true
    biting?: true
    leashCageTrained?: true
    goodWithOtherPets?: true
    goodWithChildren?: true
    indoorOutdoor?: true
    paymentMethod?: true
    agreementAccepted?: true
    validId?: true
    selfie?: true
    petpic?: true
    archived?: true
    userId?: true
    status?: true
  }

  export type SurrenderMaxAggregateInputType = {
    id?: true
    email?: true
    date?: true
    ownerName?: true
    contact?: true
    fullAddress?: true
    petType?: true
    petName?: true
    dateOfBirth?: true
    breed?: true
    color?: true
    sex?: true
    spayedNeutered?: true
    vaccinated?: true
    medicalConcerns?: true
    currentMedicalIssues?: true
    aggression?: true
    biting?: true
    leashCageTrained?: true
    goodWithOtherPets?: true
    goodWithChildren?: true
    indoorOutdoor?: true
    paymentMethod?: true
    agreementAccepted?: true
    validId?: true
    selfie?: true
    petpic?: true
    archived?: true
    userId?: true
    status?: true
  }

  export type SurrenderCountAggregateInputType = {
    id?: true
    email?: true
    date?: true
    ownerName?: true
    contact?: true
    fullAddress?: true
    petType?: true
    petName?: true
    dateOfBirth?: true
    breed?: true
    color?: true
    sex?: true
    spayedNeutered?: true
    vaccinated?: true
    medicalConcerns?: true
    currentMedicalIssues?: true
    aggression?: true
    biting?: true
    leashCageTrained?: true
    goodWithOtherPets?: true
    goodWithChildren?: true
    indoorOutdoor?: true
    paymentMethod?: true
    agreementAccepted?: true
    validId?: true
    selfie?: true
    petpic?: true
    archived?: true
    userId?: true
    status?: true
    _all?: true
  }

  export type SurrenderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surrender to aggregate.
     */
    where?: SurrenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surrenders to fetch.
     */
    orderBy?: SurrenderOrderByWithRelationInput | SurrenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurrenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surrenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surrenders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Surrenders
    **/
    _count?: true | SurrenderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurrenderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurrenderMaxAggregateInputType
  }

  export type GetSurrenderAggregateType<T extends SurrenderAggregateArgs> = {
        [P in keyof T & keyof AggregateSurrender]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurrender[P]>
      : GetScalarType<T[P], AggregateSurrender[P]>
  }




  export type SurrenderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurrenderWhereInput
    orderBy?: SurrenderOrderByWithAggregationInput | SurrenderOrderByWithAggregationInput[]
    by: SurrenderScalarFieldEnum[] | SurrenderScalarFieldEnum
    having?: SurrenderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurrenderCountAggregateInputType | true
    _min?: SurrenderMinAggregateInputType
    _max?: SurrenderMaxAggregateInputType
  }

  export type SurrenderGroupByOutputType = {
    id: string
    email: string
    date: Date
    ownerName: string
    contact: string
    fullAddress: string
    petType: string
    petName: string
    dateOfBirth: Date
    breed: string
    color: string
    sex: string
    spayedNeutered: string
    vaccinated: string
    medicalConcerns: string
    currentMedicalIssues: string
    aggression: string
    biting: string
    leashCageTrained: string
    goodWithOtherPets: string
    goodWithChildren: string
    indoorOutdoor: string
    paymentMethod: string
    agreementAccepted: boolean
    validId: string | null
    selfie: string | null
    petpic: string | null
    archived: boolean
    userId: string
    status: string | null
    _count: SurrenderCountAggregateOutputType | null
    _min: SurrenderMinAggregateOutputType | null
    _max: SurrenderMaxAggregateOutputType | null
  }

  type GetSurrenderGroupByPayload<T extends SurrenderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurrenderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurrenderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurrenderGroupByOutputType[P]>
            : GetScalarType<T[P], SurrenderGroupByOutputType[P]>
        }
      >
    >


  export type SurrenderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    date?: boolean
    ownerName?: boolean
    contact?: boolean
    fullAddress?: boolean
    petType?: boolean
    petName?: boolean
    dateOfBirth?: boolean
    breed?: boolean
    color?: boolean
    sex?: boolean
    spayedNeutered?: boolean
    vaccinated?: boolean
    medicalConcerns?: boolean
    currentMedicalIssues?: boolean
    aggression?: boolean
    biting?: boolean
    leashCageTrained?: boolean
    goodWithOtherPets?: boolean
    goodWithChildren?: boolean
    indoorOutdoor?: boolean
    paymentMethod?: boolean
    agreementAccepted?: boolean
    validId?: boolean
    selfie?: boolean
    petpic?: boolean
    archived?: boolean
    userId?: boolean
    status?: boolean
  }, ExtArgs["result"]["surrender"]>

  export type SurrenderSelectScalar = {
    id?: boolean
    email?: boolean
    date?: boolean
    ownerName?: boolean
    contact?: boolean
    fullAddress?: boolean
    petType?: boolean
    petName?: boolean
    dateOfBirth?: boolean
    breed?: boolean
    color?: boolean
    sex?: boolean
    spayedNeutered?: boolean
    vaccinated?: boolean
    medicalConcerns?: boolean
    currentMedicalIssues?: boolean
    aggression?: boolean
    biting?: boolean
    leashCageTrained?: boolean
    goodWithOtherPets?: boolean
    goodWithChildren?: boolean
    indoorOutdoor?: boolean
    paymentMethod?: boolean
    agreementAccepted?: boolean
    validId?: boolean
    selfie?: boolean
    petpic?: boolean
    archived?: boolean
    userId?: boolean
    status?: boolean
  }


  export type $SurrenderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Surrender"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      date: Date
      ownerName: string
      contact: string
      fullAddress: string
      petType: string
      petName: string
      dateOfBirth: Date
      breed: string
      color: string
      sex: string
      spayedNeutered: string
      vaccinated: string
      medicalConcerns: string
      currentMedicalIssues: string
      aggression: string
      biting: string
      leashCageTrained: string
      goodWithOtherPets: string
      goodWithChildren: string
      indoorOutdoor: string
      paymentMethod: string
      agreementAccepted: boolean
      validId: string | null
      selfie: string | null
      petpic: string | null
      archived: boolean
      userId: string
      status: string | null
    }, ExtArgs["result"]["surrender"]>
    composites: {}
  }


  type SurrenderGetPayload<S extends boolean | null | undefined | SurrenderDefaultArgs> = $Result.GetResult<Prisma.$SurrenderPayload, S>

  type SurrenderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SurrenderFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SurrenderCountAggregateInputType | true
    }

  export interface SurrenderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Surrender'], meta: { name: 'Surrender' } }
    /**
     * Find zero or one Surrender that matches the filter.
     * @param {SurrenderFindUniqueArgs} args - Arguments to find a Surrender
     * @example
     * // Get one Surrender
     * const surrender = await prisma.surrender.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SurrenderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SurrenderFindUniqueArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Surrender that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SurrenderFindUniqueOrThrowArgs} args - Arguments to find a Surrender
     * @example
     * // Get one Surrender
     * const surrender = await prisma.surrender.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SurrenderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SurrenderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Surrender that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderFindFirstArgs} args - Arguments to find a Surrender
     * @example
     * // Get one Surrender
     * const surrender = await prisma.surrender.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SurrenderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SurrenderFindFirstArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Surrender that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderFindFirstOrThrowArgs} args - Arguments to find a Surrender
     * @example
     * // Get one Surrender
     * const surrender = await prisma.surrender.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SurrenderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SurrenderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Surrenders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surrenders
     * const surrenders = await prisma.surrender.findMany()
     * 
     * // Get first 10 Surrenders
     * const surrenders = await prisma.surrender.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surrenderWithIdOnly = await prisma.surrender.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SurrenderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SurrenderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Surrender.
     * @param {SurrenderCreateArgs} args - Arguments to create a Surrender.
     * @example
     * // Create one Surrender
     * const Surrender = await prisma.surrender.create({
     *   data: {
     *     // ... data to create a Surrender
     *   }
     * })
     * 
    **/
    create<T extends SurrenderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SurrenderCreateArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Surrenders.
     *     @param {SurrenderCreateManyArgs} args - Arguments to create many Surrenders.
     *     @example
     *     // Create many Surrenders
     *     const surrender = await prisma.surrender.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SurrenderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SurrenderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Surrender.
     * @param {SurrenderDeleteArgs} args - Arguments to delete one Surrender.
     * @example
     * // Delete one Surrender
     * const Surrender = await prisma.surrender.delete({
     *   where: {
     *     // ... filter to delete one Surrender
     *   }
     * })
     * 
    **/
    delete<T extends SurrenderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SurrenderDeleteArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Surrender.
     * @param {SurrenderUpdateArgs} args - Arguments to update one Surrender.
     * @example
     * // Update one Surrender
     * const surrender = await prisma.surrender.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SurrenderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SurrenderUpdateArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Surrenders.
     * @param {SurrenderDeleteManyArgs} args - Arguments to filter Surrenders to delete.
     * @example
     * // Delete a few Surrenders
     * const { count } = await prisma.surrender.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SurrenderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SurrenderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surrenders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surrenders
     * const surrender = await prisma.surrender.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SurrenderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SurrenderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Surrender.
     * @param {SurrenderUpsertArgs} args - Arguments to update or create a Surrender.
     * @example
     * // Update or create a Surrender
     * const surrender = await prisma.surrender.upsert({
     *   create: {
     *     // ... data to create a Surrender
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Surrender we want to update
     *   }
     * })
    **/
    upsert<T extends SurrenderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SurrenderUpsertArgs<ExtArgs>>
    ): Prisma__SurrenderClient<$Result.GetResult<Prisma.$SurrenderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Surrenders that matches the filter.
     * @param {SurrenderFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const surrender = await prisma.surrender.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SurrenderFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Surrender.
     * @param {SurrenderAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const surrender = await prisma.surrender.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SurrenderAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Surrenders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderCountArgs} args - Arguments to filter Surrenders to count.
     * @example
     * // Count the number of Surrenders
     * const count = await prisma.surrender.count({
     *   where: {
     *     // ... the filter for the Surrenders we want to count
     *   }
     * })
    **/
    count<T extends SurrenderCountArgs>(
      args?: Subset<T, SurrenderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurrenderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Surrender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurrenderAggregateArgs>(args: Subset<T, SurrenderAggregateArgs>): Prisma.PrismaPromise<GetSurrenderAggregateType<T>>

    /**
     * Group by Surrender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurrenderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurrenderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurrenderGroupByArgs['orderBy'] }
        : { orderBy?: SurrenderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurrenderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurrenderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Surrender model
   */
  readonly fields: SurrenderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Surrender.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurrenderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Surrender model
   */ 
  interface SurrenderFieldRefs {
    readonly id: FieldRef<"Surrender", 'String'>
    readonly email: FieldRef<"Surrender", 'String'>
    readonly date: FieldRef<"Surrender", 'DateTime'>
    readonly ownerName: FieldRef<"Surrender", 'String'>
    readonly contact: FieldRef<"Surrender", 'String'>
    readonly fullAddress: FieldRef<"Surrender", 'String'>
    readonly petType: FieldRef<"Surrender", 'String'>
    readonly petName: FieldRef<"Surrender", 'String'>
    readonly dateOfBirth: FieldRef<"Surrender", 'DateTime'>
    readonly breed: FieldRef<"Surrender", 'String'>
    readonly color: FieldRef<"Surrender", 'String'>
    readonly sex: FieldRef<"Surrender", 'String'>
    readonly spayedNeutered: FieldRef<"Surrender", 'String'>
    readonly vaccinated: FieldRef<"Surrender", 'String'>
    readonly medicalConcerns: FieldRef<"Surrender", 'String'>
    readonly currentMedicalIssues: FieldRef<"Surrender", 'String'>
    readonly aggression: FieldRef<"Surrender", 'String'>
    readonly biting: FieldRef<"Surrender", 'String'>
    readonly leashCageTrained: FieldRef<"Surrender", 'String'>
    readonly goodWithOtherPets: FieldRef<"Surrender", 'String'>
    readonly goodWithChildren: FieldRef<"Surrender", 'String'>
    readonly indoorOutdoor: FieldRef<"Surrender", 'String'>
    readonly paymentMethod: FieldRef<"Surrender", 'String'>
    readonly agreementAccepted: FieldRef<"Surrender", 'Boolean'>
    readonly validId: FieldRef<"Surrender", 'String'>
    readonly selfie: FieldRef<"Surrender", 'String'>
    readonly petpic: FieldRef<"Surrender", 'String'>
    readonly archived: FieldRef<"Surrender", 'Boolean'>
    readonly userId: FieldRef<"Surrender", 'String'>
    readonly status: FieldRef<"Surrender", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Surrender findUnique
   */
  export type SurrenderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * Filter, which Surrender to fetch.
     */
    where: SurrenderWhereUniqueInput
  }


  /**
   * Surrender findUniqueOrThrow
   */
  export type SurrenderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * Filter, which Surrender to fetch.
     */
    where: SurrenderWhereUniqueInput
  }


  /**
   * Surrender findFirst
   */
  export type SurrenderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * Filter, which Surrender to fetch.
     */
    where?: SurrenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surrenders to fetch.
     */
    orderBy?: SurrenderOrderByWithRelationInput | SurrenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surrenders.
     */
    cursor?: SurrenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surrenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surrenders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surrenders.
     */
    distinct?: SurrenderScalarFieldEnum | SurrenderScalarFieldEnum[]
  }


  /**
   * Surrender findFirstOrThrow
   */
  export type SurrenderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * Filter, which Surrender to fetch.
     */
    where?: SurrenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surrenders to fetch.
     */
    orderBy?: SurrenderOrderByWithRelationInput | SurrenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surrenders.
     */
    cursor?: SurrenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surrenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surrenders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surrenders.
     */
    distinct?: SurrenderScalarFieldEnum | SurrenderScalarFieldEnum[]
  }


  /**
   * Surrender findMany
   */
  export type SurrenderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * Filter, which Surrenders to fetch.
     */
    where?: SurrenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surrenders to fetch.
     */
    orderBy?: SurrenderOrderByWithRelationInput | SurrenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Surrenders.
     */
    cursor?: SurrenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surrenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surrenders.
     */
    skip?: number
    distinct?: SurrenderScalarFieldEnum | SurrenderScalarFieldEnum[]
  }


  /**
   * Surrender create
   */
  export type SurrenderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * The data needed to create a Surrender.
     */
    data: XOR<SurrenderCreateInput, SurrenderUncheckedCreateInput>
  }


  /**
   * Surrender createMany
   */
  export type SurrenderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Surrenders.
     */
    data: SurrenderCreateManyInput | SurrenderCreateManyInput[]
  }


  /**
   * Surrender update
   */
  export type SurrenderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * The data needed to update a Surrender.
     */
    data: XOR<SurrenderUpdateInput, SurrenderUncheckedUpdateInput>
    /**
     * Choose, which Surrender to update.
     */
    where: SurrenderWhereUniqueInput
  }


  /**
   * Surrender updateMany
   */
  export type SurrenderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Surrenders.
     */
    data: XOR<SurrenderUpdateManyMutationInput, SurrenderUncheckedUpdateManyInput>
    /**
     * Filter which Surrenders to update
     */
    where?: SurrenderWhereInput
  }


  /**
   * Surrender upsert
   */
  export type SurrenderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * The filter to search for the Surrender to update in case it exists.
     */
    where: SurrenderWhereUniqueInput
    /**
     * In case the Surrender found by the `where` argument doesn't exist, create a new Surrender with this data.
     */
    create: XOR<SurrenderCreateInput, SurrenderUncheckedCreateInput>
    /**
     * In case the Surrender was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurrenderUpdateInput, SurrenderUncheckedUpdateInput>
  }


  /**
   * Surrender delete
   */
  export type SurrenderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
    /**
     * Filter which Surrender to delete.
     */
    where: SurrenderWhereUniqueInput
  }


  /**
   * Surrender deleteMany
   */
  export type SurrenderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surrenders to delete
     */
    where?: SurrenderWhereInput
  }


  /**
   * Surrender findRaw
   */
  export type SurrenderFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Surrender aggregateRaw
   */
  export type SurrenderAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Surrender without action
   */
  export type SurrenderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surrender
     */
    select?: SurrenderSelect<ExtArgs> | null
  }



  /**
   * Model ContactFormEntry
   */

  export type AggregateContactFormEntry = {
    _count: ContactFormEntryCountAggregateOutputType | null
    _min: ContactFormEntryMinAggregateOutputType | null
    _max: ContactFormEntryMaxAggregateOutputType | null
  }

  export type ContactFormEntryMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactFormEntryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactFormEntryCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContactFormEntryMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactFormEntryMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactFormEntryCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContactFormEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactFormEntry to aggregate.
     */
    where?: ContactFormEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormEntries to fetch.
     */
    orderBy?: ContactFormEntryOrderByWithRelationInput | ContactFormEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactFormEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactFormEntries
    **/
    _count?: true | ContactFormEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactFormEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactFormEntryMaxAggregateInputType
  }

  export type GetContactFormEntryAggregateType<T extends ContactFormEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateContactFormEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactFormEntry[P]>
      : GetScalarType<T[P], AggregateContactFormEntry[P]>
  }




  export type ContactFormEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactFormEntryWhereInput
    orderBy?: ContactFormEntryOrderByWithAggregationInput | ContactFormEntryOrderByWithAggregationInput[]
    by: ContactFormEntryScalarFieldEnum[] | ContactFormEntryScalarFieldEnum
    having?: ContactFormEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactFormEntryCountAggregateInputType | true
    _min?: ContactFormEntryMinAggregateInputType
    _max?: ContactFormEntryMaxAggregateInputType
  }

  export type ContactFormEntryGroupByOutputType = {
    id: string
    name: string
    email: string
    phone: string
    message: string
    createdAt: Date
    updatedAt: Date
    _count: ContactFormEntryCountAggregateOutputType | null
    _min: ContactFormEntryMinAggregateOutputType | null
    _max: ContactFormEntryMaxAggregateOutputType | null
  }

  type GetContactFormEntryGroupByPayload<T extends ContactFormEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactFormEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactFormEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactFormEntryGroupByOutputType[P]>
            : GetScalarType<T[P], ContactFormEntryGroupByOutputType[P]>
        }
      >
    >


  export type ContactFormEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contactFormEntry"]>

  export type ContactFormEntrySelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ContactFormEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactFormEntry"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      phone: string
      message: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contactFormEntry"]>
    composites: {}
  }


  type ContactFormEntryGetPayload<S extends boolean | null | undefined | ContactFormEntryDefaultArgs> = $Result.GetResult<Prisma.$ContactFormEntryPayload, S>

  type ContactFormEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactFormEntryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ContactFormEntryCountAggregateInputType | true
    }

  export interface ContactFormEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactFormEntry'], meta: { name: 'ContactFormEntry' } }
    /**
     * Find zero or one ContactFormEntry that matches the filter.
     * @param {ContactFormEntryFindUniqueArgs} args - Arguments to find a ContactFormEntry
     * @example
     * // Get one ContactFormEntry
     * const contactFormEntry = await prisma.contactFormEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFormEntryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormEntryFindUniqueArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ContactFormEntry that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactFormEntryFindUniqueOrThrowArgs} args - Arguments to find a ContactFormEntry
     * @example
     * // Get one ContactFormEntry
     * const contactFormEntry = await prisma.contactFormEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFormEntryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormEntryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ContactFormEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryFindFirstArgs} args - Arguments to find a ContactFormEntry
     * @example
     * // Get one ContactFormEntry
     * const contactFormEntry = await prisma.contactFormEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFormEntryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormEntryFindFirstArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ContactFormEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryFindFirstOrThrowArgs} args - Arguments to find a ContactFormEntry
     * @example
     * // Get one ContactFormEntry
     * const contactFormEntry = await prisma.contactFormEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFormEntryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormEntryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ContactFormEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactFormEntries
     * const contactFormEntries = await prisma.contactFormEntry.findMany()
     * 
     * // Get first 10 ContactFormEntries
     * const contactFormEntries = await prisma.contactFormEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactFormEntryWithIdOnly = await prisma.contactFormEntry.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFormEntryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormEntryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ContactFormEntry.
     * @param {ContactFormEntryCreateArgs} args - Arguments to create a ContactFormEntry.
     * @example
     * // Create one ContactFormEntry
     * const ContactFormEntry = await prisma.contactFormEntry.create({
     *   data: {
     *     // ... data to create a ContactFormEntry
     *   }
     * })
     * 
    **/
    create<T extends ContactFormEntryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormEntryCreateArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ContactFormEntries.
     *     @param {ContactFormEntryCreateManyArgs} args - Arguments to create many ContactFormEntries.
     *     @example
     *     // Create many ContactFormEntries
     *     const contactFormEntry = await prisma.contactFormEntry.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactFormEntryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormEntryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ContactFormEntry.
     * @param {ContactFormEntryDeleteArgs} args - Arguments to delete one ContactFormEntry.
     * @example
     * // Delete one ContactFormEntry
     * const ContactFormEntry = await prisma.contactFormEntry.delete({
     *   where: {
     *     // ... filter to delete one ContactFormEntry
     *   }
     * })
     * 
    **/
    delete<T extends ContactFormEntryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormEntryDeleteArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ContactFormEntry.
     * @param {ContactFormEntryUpdateArgs} args - Arguments to update one ContactFormEntry.
     * @example
     * // Update one ContactFormEntry
     * const contactFormEntry = await prisma.contactFormEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactFormEntryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormEntryUpdateArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ContactFormEntries.
     * @param {ContactFormEntryDeleteManyArgs} args - Arguments to filter ContactFormEntries to delete.
     * @example
     * // Delete a few ContactFormEntries
     * const { count } = await prisma.contactFormEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactFormEntryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormEntryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactFormEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactFormEntries
     * const contactFormEntry = await prisma.contactFormEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactFormEntryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormEntryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContactFormEntry.
     * @param {ContactFormEntryUpsertArgs} args - Arguments to update or create a ContactFormEntry.
     * @example
     * // Update or create a ContactFormEntry
     * const contactFormEntry = await prisma.contactFormEntry.upsert({
     *   create: {
     *     // ... data to create a ContactFormEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactFormEntry we want to update
     *   }
     * })
    **/
    upsert<T extends ContactFormEntryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormEntryUpsertArgs<ExtArgs>>
    ): Prisma__ContactFormEntryClient<$Result.GetResult<Prisma.$ContactFormEntryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more ContactFormEntries that matches the filter.
     * @param {ContactFormEntryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const contactFormEntry = await prisma.contactFormEntry.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ContactFormEntryFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ContactFormEntry.
     * @param {ContactFormEntryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const contactFormEntry = await prisma.contactFormEntry.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ContactFormEntryAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of ContactFormEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryCountArgs} args - Arguments to filter ContactFormEntries to count.
     * @example
     * // Count the number of ContactFormEntries
     * const count = await prisma.contactFormEntry.count({
     *   where: {
     *     // ... the filter for the ContactFormEntries we want to count
     *   }
     * })
    **/
    count<T extends ContactFormEntryCountArgs>(
      args?: Subset<T, ContactFormEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactFormEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactFormEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactFormEntryAggregateArgs>(args: Subset<T, ContactFormEntryAggregateArgs>): Prisma.PrismaPromise<GetContactFormEntryAggregateType<T>>

    /**
     * Group by ContactFormEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactFormEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactFormEntryGroupByArgs['orderBy'] }
        : { orderBy?: ContactFormEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactFormEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactFormEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactFormEntry model
   */
  readonly fields: ContactFormEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactFormEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactFormEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ContactFormEntry model
   */ 
  interface ContactFormEntryFieldRefs {
    readonly id: FieldRef<"ContactFormEntry", 'String'>
    readonly name: FieldRef<"ContactFormEntry", 'String'>
    readonly email: FieldRef<"ContactFormEntry", 'String'>
    readonly phone: FieldRef<"ContactFormEntry", 'String'>
    readonly message: FieldRef<"ContactFormEntry", 'String'>
    readonly createdAt: FieldRef<"ContactFormEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"ContactFormEntry", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ContactFormEntry findUnique
   */
  export type ContactFormEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * Filter, which ContactFormEntry to fetch.
     */
    where: ContactFormEntryWhereUniqueInput
  }


  /**
   * ContactFormEntry findUniqueOrThrow
   */
  export type ContactFormEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * Filter, which ContactFormEntry to fetch.
     */
    where: ContactFormEntryWhereUniqueInput
  }


  /**
   * ContactFormEntry findFirst
   */
  export type ContactFormEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * Filter, which ContactFormEntry to fetch.
     */
    where?: ContactFormEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormEntries to fetch.
     */
    orderBy?: ContactFormEntryOrderByWithRelationInput | ContactFormEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactFormEntries.
     */
    cursor?: ContactFormEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactFormEntries.
     */
    distinct?: ContactFormEntryScalarFieldEnum | ContactFormEntryScalarFieldEnum[]
  }


  /**
   * ContactFormEntry findFirstOrThrow
   */
  export type ContactFormEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * Filter, which ContactFormEntry to fetch.
     */
    where?: ContactFormEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormEntries to fetch.
     */
    orderBy?: ContactFormEntryOrderByWithRelationInput | ContactFormEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactFormEntries.
     */
    cursor?: ContactFormEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactFormEntries.
     */
    distinct?: ContactFormEntryScalarFieldEnum | ContactFormEntryScalarFieldEnum[]
  }


  /**
   * ContactFormEntry findMany
   */
  export type ContactFormEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * Filter, which ContactFormEntries to fetch.
     */
    where?: ContactFormEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormEntries to fetch.
     */
    orderBy?: ContactFormEntryOrderByWithRelationInput | ContactFormEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactFormEntries.
     */
    cursor?: ContactFormEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormEntries.
     */
    skip?: number
    distinct?: ContactFormEntryScalarFieldEnum | ContactFormEntryScalarFieldEnum[]
  }


  /**
   * ContactFormEntry create
   */
  export type ContactFormEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * The data needed to create a ContactFormEntry.
     */
    data: XOR<ContactFormEntryCreateInput, ContactFormEntryUncheckedCreateInput>
  }


  /**
   * ContactFormEntry createMany
   */
  export type ContactFormEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactFormEntries.
     */
    data: ContactFormEntryCreateManyInput | ContactFormEntryCreateManyInput[]
  }


  /**
   * ContactFormEntry update
   */
  export type ContactFormEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * The data needed to update a ContactFormEntry.
     */
    data: XOR<ContactFormEntryUpdateInput, ContactFormEntryUncheckedUpdateInput>
    /**
     * Choose, which ContactFormEntry to update.
     */
    where: ContactFormEntryWhereUniqueInput
  }


  /**
   * ContactFormEntry updateMany
   */
  export type ContactFormEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactFormEntries.
     */
    data: XOR<ContactFormEntryUpdateManyMutationInput, ContactFormEntryUncheckedUpdateManyInput>
    /**
     * Filter which ContactFormEntries to update
     */
    where?: ContactFormEntryWhereInput
  }


  /**
   * ContactFormEntry upsert
   */
  export type ContactFormEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * The filter to search for the ContactFormEntry to update in case it exists.
     */
    where: ContactFormEntryWhereUniqueInput
    /**
     * In case the ContactFormEntry found by the `where` argument doesn't exist, create a new ContactFormEntry with this data.
     */
    create: XOR<ContactFormEntryCreateInput, ContactFormEntryUncheckedCreateInput>
    /**
     * In case the ContactFormEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactFormEntryUpdateInput, ContactFormEntryUncheckedUpdateInput>
  }


  /**
   * ContactFormEntry delete
   */
  export type ContactFormEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
    /**
     * Filter which ContactFormEntry to delete.
     */
    where: ContactFormEntryWhereUniqueInput
  }


  /**
   * ContactFormEntry deleteMany
   */
  export type ContactFormEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactFormEntries to delete
     */
    where?: ContactFormEntryWhereInput
  }


  /**
   * ContactFormEntry findRaw
   */
  export type ContactFormEntryFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * ContactFormEntry aggregateRaw
   */
  export type ContactFormEntryAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * ContactFormEntry without action
   */
  export type ContactFormEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormEntry
     */
    select?: ContactFormEntrySelect<ExtArgs> | null
  }



  /**
   * Model Adoption
   */

  export type AggregateAdoption = {
    _count: AdoptionCountAggregateOutputType | null
    _min: AdoptionMinAggregateOutputType | null
    _max: AdoptionMaxAggregateOutputType | null
  }

  export type AdoptionMinAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    petType: string | null
    petName: string | null
    existingPets: string | null
    visitDate: Date | null
    agreeToAdopt: boolean | null
    promiseToCare: boolean | null
    acceptTerms: boolean | null
    address: string | null
    contactNumber: string | null
    contractDate: Date | null
    facebookLink: string | null
    validId: string | null
    petStayingPhoto: string | null
    selfie: string | null
    archived: boolean | null
    petId: string | null
    userId: string | null
    status: string | null
  }

  export type AdoptionMaxAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    petType: string | null
    petName: string | null
    existingPets: string | null
    visitDate: Date | null
    agreeToAdopt: boolean | null
    promiseToCare: boolean | null
    acceptTerms: boolean | null
    address: string | null
    contactNumber: string | null
    contractDate: Date | null
    facebookLink: string | null
    validId: string | null
    petStayingPhoto: string | null
    selfie: string | null
    archived: boolean | null
    petId: string | null
    userId: string | null
    status: string | null
  }

  export type AdoptionCountAggregateOutputType = {
    id: number
    email: number
    fullName: number
    petType: number
    petName: number
    existingPets: number
    visitDate: number
    agreeToAdopt: number
    promiseToCare: number
    acceptTerms: number
    address: number
    contactNumber: number
    contractDate: number
    facebookLink: number
    validId: number
    petStayingPhoto: number
    selfie: number
    archived: number
    petId: number
    userId: number
    status: number
    _all: number
  }


  export type AdoptionMinAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    petType?: true
    petName?: true
    existingPets?: true
    visitDate?: true
    agreeToAdopt?: true
    promiseToCare?: true
    acceptTerms?: true
    address?: true
    contactNumber?: true
    contractDate?: true
    facebookLink?: true
    validId?: true
    petStayingPhoto?: true
    selfie?: true
    archived?: true
    petId?: true
    userId?: true
    status?: true
  }

  export type AdoptionMaxAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    petType?: true
    petName?: true
    existingPets?: true
    visitDate?: true
    agreeToAdopt?: true
    promiseToCare?: true
    acceptTerms?: true
    address?: true
    contactNumber?: true
    contractDate?: true
    facebookLink?: true
    validId?: true
    petStayingPhoto?: true
    selfie?: true
    archived?: true
    petId?: true
    userId?: true
    status?: true
  }

  export type AdoptionCountAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    petType?: true
    petName?: true
    existingPets?: true
    visitDate?: true
    agreeToAdopt?: true
    promiseToCare?: true
    acceptTerms?: true
    address?: true
    contactNumber?: true
    contractDate?: true
    facebookLink?: true
    validId?: true
    petStayingPhoto?: true
    selfie?: true
    archived?: true
    petId?: true
    userId?: true
    status?: true
    _all?: true
  }

  export type AdoptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Adoption to aggregate.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: AdoptionOrderByWithRelationInput | AdoptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Adoptions
    **/
    _count?: true | AdoptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdoptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdoptionMaxAggregateInputType
  }

  export type GetAdoptionAggregateType<T extends AdoptionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdoption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdoption[P]>
      : GetScalarType<T[P], AggregateAdoption[P]>
  }




  export type AdoptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdoptionWhereInput
    orderBy?: AdoptionOrderByWithAggregationInput | AdoptionOrderByWithAggregationInput[]
    by: AdoptionScalarFieldEnum[] | AdoptionScalarFieldEnum
    having?: AdoptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdoptionCountAggregateInputType | true
    _min?: AdoptionMinAggregateInputType
    _max?: AdoptionMaxAggregateInputType
  }

  export type AdoptionGroupByOutputType = {
    id: string
    email: string
    fullName: string
    petType: string
    petName: string
    existingPets: string
    visitDate: Date
    agreeToAdopt: boolean
    promiseToCare: boolean
    acceptTerms: boolean
    address: string
    contactNumber: string
    contractDate: Date
    facebookLink: string
    validId: string | null
    petStayingPhoto: string | null
    selfie: string | null
    archived: boolean
    petId: string
    userId: string
    status: string | null
    _count: AdoptionCountAggregateOutputType | null
    _min: AdoptionMinAggregateOutputType | null
    _max: AdoptionMaxAggregateOutputType | null
  }

  type GetAdoptionGroupByPayload<T extends AdoptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdoptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdoptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdoptionGroupByOutputType[P]>
            : GetScalarType<T[P], AdoptionGroupByOutputType[P]>
        }
      >
    >


  export type AdoptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    petType?: boolean
    petName?: boolean
    existingPets?: boolean
    visitDate?: boolean
    agreeToAdopt?: boolean
    promiseToCare?: boolean
    acceptTerms?: boolean
    address?: boolean
    contactNumber?: boolean
    contractDate?: boolean
    facebookLink?: boolean
    validId?: boolean
    petStayingPhoto?: boolean
    selfie?: boolean
    archived?: boolean
    petId?: boolean
    userId?: boolean
    status?: boolean
  }, ExtArgs["result"]["adoption"]>

  export type AdoptionSelectScalar = {
    id?: boolean
    email?: boolean
    fullName?: boolean
    petType?: boolean
    petName?: boolean
    existingPets?: boolean
    visitDate?: boolean
    agreeToAdopt?: boolean
    promiseToCare?: boolean
    acceptTerms?: boolean
    address?: boolean
    contactNumber?: boolean
    contractDate?: boolean
    facebookLink?: boolean
    validId?: boolean
    petStayingPhoto?: boolean
    selfie?: boolean
    archived?: boolean
    petId?: boolean
    userId?: boolean
    status?: boolean
  }


  export type $AdoptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Adoption"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      fullName: string
      petType: string
      petName: string
      existingPets: string
      visitDate: Date
      agreeToAdopt: boolean
      promiseToCare: boolean
      acceptTerms: boolean
      address: string
      contactNumber: string
      contractDate: Date
      facebookLink: string
      validId: string | null
      petStayingPhoto: string | null
      selfie: string | null
      archived: boolean
      petId: string
      userId: string
      status: string | null
    }, ExtArgs["result"]["adoption"]>
    composites: {}
  }


  type AdoptionGetPayload<S extends boolean | null | undefined | AdoptionDefaultArgs> = $Result.GetResult<Prisma.$AdoptionPayload, S>

  type AdoptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdoptionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AdoptionCountAggregateInputType | true
    }

  export interface AdoptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Adoption'], meta: { name: 'Adoption' } }
    /**
     * Find zero or one Adoption that matches the filter.
     * @param {AdoptionFindUniqueArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdoptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptionFindUniqueArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Adoption that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdoptionFindUniqueOrThrowArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdoptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Adoption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionFindFirstArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdoptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptionFindFirstArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Adoption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionFindFirstOrThrowArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdoptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Adoptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adoptions
     * const adoptions = await prisma.adoption.findMany()
     * 
     * // Get first 10 Adoptions
     * const adoptions = await prisma.adoption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adoptionWithIdOnly = await prisma.adoption.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdoptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Adoption.
     * @param {AdoptionCreateArgs} args - Arguments to create a Adoption.
     * @example
     * // Create one Adoption
     * const Adoption = await prisma.adoption.create({
     *   data: {
     *     // ... data to create a Adoption
     *   }
     * })
     * 
    **/
    create<T extends AdoptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptionCreateArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Adoptions.
     *     @param {AdoptionCreateManyArgs} args - Arguments to create many Adoptions.
     *     @example
     *     // Create many Adoptions
     *     const adoption = await prisma.adoption.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdoptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Adoption.
     * @param {AdoptionDeleteArgs} args - Arguments to delete one Adoption.
     * @example
     * // Delete one Adoption
     * const Adoption = await prisma.adoption.delete({
     *   where: {
     *     // ... filter to delete one Adoption
     *   }
     * })
     * 
    **/
    delete<T extends AdoptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptionDeleteArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Adoption.
     * @param {AdoptionUpdateArgs} args - Arguments to update one Adoption.
     * @example
     * // Update one Adoption
     * const adoption = await prisma.adoption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdoptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptionUpdateArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Adoptions.
     * @param {AdoptionDeleteManyArgs} args - Arguments to filter Adoptions to delete.
     * @example
     * // Delete a few Adoptions
     * const { count } = await prisma.adoption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdoptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adoptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adoptions
     * const adoption = await prisma.adoption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdoptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adoption.
     * @param {AdoptionUpsertArgs} args - Arguments to update or create a Adoption.
     * @example
     * // Update or create a Adoption
     * const adoption = await prisma.adoption.upsert({
     *   create: {
     *     // ... data to create a Adoption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adoption we want to update
     *   }
     * })
    **/
    upsert<T extends AdoptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptionUpsertArgs<ExtArgs>>
    ): Prisma__AdoptionClient<$Result.GetResult<Prisma.$AdoptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Adoptions that matches the filter.
     * @param {AdoptionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const adoption = await prisma.adoption.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdoptionFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Adoption.
     * @param {AdoptionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const adoption = await prisma.adoption.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdoptionAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Adoptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionCountArgs} args - Arguments to filter Adoptions to count.
     * @example
     * // Count the number of Adoptions
     * const count = await prisma.adoption.count({
     *   where: {
     *     // ... the filter for the Adoptions we want to count
     *   }
     * })
    **/
    count<T extends AdoptionCountArgs>(
      args?: Subset<T, AdoptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdoptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adoption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdoptionAggregateArgs>(args: Subset<T, AdoptionAggregateArgs>): Prisma.PrismaPromise<GetAdoptionAggregateType<T>>

    /**
     * Group by Adoption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdoptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdoptionGroupByArgs['orderBy'] }
        : { orderBy?: AdoptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdoptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdoptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Adoption model
   */
  readonly fields: AdoptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Adoption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdoptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Adoption model
   */ 
  interface AdoptionFieldRefs {
    readonly id: FieldRef<"Adoption", 'String'>
    readonly email: FieldRef<"Adoption", 'String'>
    readonly fullName: FieldRef<"Adoption", 'String'>
    readonly petType: FieldRef<"Adoption", 'String'>
    readonly petName: FieldRef<"Adoption", 'String'>
    readonly existingPets: FieldRef<"Adoption", 'String'>
    readonly visitDate: FieldRef<"Adoption", 'DateTime'>
    readonly agreeToAdopt: FieldRef<"Adoption", 'Boolean'>
    readonly promiseToCare: FieldRef<"Adoption", 'Boolean'>
    readonly acceptTerms: FieldRef<"Adoption", 'Boolean'>
    readonly address: FieldRef<"Adoption", 'String'>
    readonly contactNumber: FieldRef<"Adoption", 'String'>
    readonly contractDate: FieldRef<"Adoption", 'DateTime'>
    readonly facebookLink: FieldRef<"Adoption", 'String'>
    readonly validId: FieldRef<"Adoption", 'String'>
    readonly petStayingPhoto: FieldRef<"Adoption", 'String'>
    readonly selfie: FieldRef<"Adoption", 'String'>
    readonly archived: FieldRef<"Adoption", 'Boolean'>
    readonly petId: FieldRef<"Adoption", 'String'>
    readonly userId: FieldRef<"Adoption", 'String'>
    readonly status: FieldRef<"Adoption", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Adoption findUnique
   */
  export type AdoptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * Filter, which Adoption to fetch.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption findUniqueOrThrow
   */
  export type AdoptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * Filter, which Adoption to fetch.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption findFirst
   */
  export type AdoptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * Filter, which Adoption to fetch.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: AdoptionOrderByWithRelationInput | AdoptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adoptions.
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adoptions.
     */
    distinct?: AdoptionScalarFieldEnum | AdoptionScalarFieldEnum[]
  }


  /**
   * Adoption findFirstOrThrow
   */
  export type AdoptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * Filter, which Adoption to fetch.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: AdoptionOrderByWithRelationInput | AdoptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adoptions.
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adoptions.
     */
    distinct?: AdoptionScalarFieldEnum | AdoptionScalarFieldEnum[]
  }


  /**
   * Adoption findMany
   */
  export type AdoptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * Filter, which Adoptions to fetch.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: AdoptionOrderByWithRelationInput | AdoptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Adoptions.
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    distinct?: AdoptionScalarFieldEnum | AdoptionScalarFieldEnum[]
  }


  /**
   * Adoption create
   */
  export type AdoptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * The data needed to create a Adoption.
     */
    data: XOR<AdoptionCreateInput, AdoptionUncheckedCreateInput>
  }


  /**
   * Adoption createMany
   */
  export type AdoptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Adoptions.
     */
    data: AdoptionCreateManyInput | AdoptionCreateManyInput[]
  }


  /**
   * Adoption update
   */
  export type AdoptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * The data needed to update a Adoption.
     */
    data: XOR<AdoptionUpdateInput, AdoptionUncheckedUpdateInput>
    /**
     * Choose, which Adoption to update.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption updateMany
   */
  export type AdoptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Adoptions.
     */
    data: XOR<AdoptionUpdateManyMutationInput, AdoptionUncheckedUpdateManyInput>
    /**
     * Filter which Adoptions to update
     */
    where?: AdoptionWhereInput
  }


  /**
   * Adoption upsert
   */
  export type AdoptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * The filter to search for the Adoption to update in case it exists.
     */
    where: AdoptionWhereUniqueInput
    /**
     * In case the Adoption found by the `where` argument doesn't exist, create a new Adoption with this data.
     */
    create: XOR<AdoptionCreateInput, AdoptionUncheckedCreateInput>
    /**
     * In case the Adoption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdoptionUpdateInput, AdoptionUncheckedUpdateInput>
  }


  /**
   * Adoption delete
   */
  export type AdoptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
    /**
     * Filter which Adoption to delete.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption deleteMany
   */
  export type AdoptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Adoptions to delete
     */
    where?: AdoptionWhereInput
  }


  /**
   * Adoption findRaw
   */
  export type AdoptionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Adoption aggregateRaw
   */
  export type AdoptionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Adoption without action
   */
  export type AdoptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect<ExtArgs> | null
  }



  /**
   * Model PetRequest
   */

  export type AggregatePetRequest = {
    _count: PetRequestCountAggregateOutputType | null
    _min: PetRequestMinAggregateOutputType | null
    _max: PetRequestMaxAggregateOutputType | null
  }

  export type PetRequestMinAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    contactNumber: string | null
    date: Date | null
    type: string | null
    breed: string | null
    sex: string | null
    color: string | null
    agePreference: string | null
    createdAt: Date | null
    updatedAt: Date | null
    archived: boolean | null
    userId: string | null
    status: string | null
  }

  export type PetRequestMaxAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    contactNumber: string | null
    date: Date | null
    type: string | null
    breed: string | null
    sex: string | null
    color: string | null
    agePreference: string | null
    createdAt: Date | null
    updatedAt: Date | null
    archived: boolean | null
    userId: string | null
    status: string | null
  }

  export type PetRequestCountAggregateOutputType = {
    id: number
    email: number
    fullName: number
    contactNumber: number
    date: number
    type: number
    breed: number
    sex: number
    color: number
    agePreference: number
    createdAt: number
    updatedAt: number
    archived: number
    userId: number
    status: number
    _all: number
  }


  export type PetRequestMinAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    contactNumber?: true
    date?: true
    type?: true
    breed?: true
    sex?: true
    color?: true
    agePreference?: true
    createdAt?: true
    updatedAt?: true
    archived?: true
    userId?: true
    status?: true
  }

  export type PetRequestMaxAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    contactNumber?: true
    date?: true
    type?: true
    breed?: true
    sex?: true
    color?: true
    agePreference?: true
    createdAt?: true
    updatedAt?: true
    archived?: true
    userId?: true
    status?: true
  }

  export type PetRequestCountAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    contactNumber?: true
    date?: true
    type?: true
    breed?: true
    sex?: true
    color?: true
    agePreference?: true
    createdAt?: true
    updatedAt?: true
    archived?: true
    userId?: true
    status?: true
    _all?: true
  }

  export type PetRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PetRequest to aggregate.
     */
    where?: PetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetRequests to fetch.
     */
    orderBy?: PetRequestOrderByWithRelationInput | PetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PetRequests
    **/
    _count?: true | PetRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetRequestMaxAggregateInputType
  }

  export type GetPetRequestAggregateType<T extends PetRequestAggregateArgs> = {
        [P in keyof T & keyof AggregatePetRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePetRequest[P]>
      : GetScalarType<T[P], AggregatePetRequest[P]>
  }




  export type PetRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetRequestWhereInput
    orderBy?: PetRequestOrderByWithAggregationInput | PetRequestOrderByWithAggregationInput[]
    by: PetRequestScalarFieldEnum[] | PetRequestScalarFieldEnum
    having?: PetRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetRequestCountAggregateInputType | true
    _min?: PetRequestMinAggregateInputType
    _max?: PetRequestMaxAggregateInputType
  }

  export type PetRequestGroupByOutputType = {
    id: string
    email: string
    fullName: string
    contactNumber: string
    date: Date
    type: string
    breed: string
    sex: string
    color: string
    agePreference: string
    createdAt: Date
    updatedAt: Date
    archived: boolean
    userId: string
    status: string | null
    _count: PetRequestCountAggregateOutputType | null
    _min: PetRequestMinAggregateOutputType | null
    _max: PetRequestMaxAggregateOutputType | null
  }

  type GetPetRequestGroupByPayload<T extends PetRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetRequestGroupByOutputType[P]>
            : GetScalarType<T[P], PetRequestGroupByOutputType[P]>
        }
      >
    >


  export type PetRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    contactNumber?: boolean
    date?: boolean
    type?: boolean
    breed?: boolean
    sex?: boolean
    color?: boolean
    agePreference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archived?: boolean
    userId?: boolean
    status?: boolean
  }, ExtArgs["result"]["petRequest"]>

  export type PetRequestSelectScalar = {
    id?: boolean
    email?: boolean
    fullName?: boolean
    contactNumber?: boolean
    date?: boolean
    type?: boolean
    breed?: boolean
    sex?: boolean
    color?: boolean
    agePreference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archived?: boolean
    userId?: boolean
    status?: boolean
  }


  export type $PetRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PetRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      fullName: string
      contactNumber: string
      date: Date
      type: string
      breed: string
      sex: string
      color: string
      agePreference: string
      createdAt: Date
      updatedAt: Date
      archived: boolean
      userId: string
      status: string | null
    }, ExtArgs["result"]["petRequest"]>
    composites: {}
  }


  type PetRequestGetPayload<S extends boolean | null | undefined | PetRequestDefaultArgs> = $Result.GetResult<Prisma.$PetRequestPayload, S>

  type PetRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PetRequestFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PetRequestCountAggregateInputType | true
    }

  export interface PetRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PetRequest'], meta: { name: 'PetRequest' } }
    /**
     * Find zero or one PetRequest that matches the filter.
     * @param {PetRequestFindUniqueArgs} args - Arguments to find a PetRequest
     * @example
     * // Get one PetRequest
     * const petRequest = await prisma.petRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetRequestFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PetRequestFindUniqueArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PetRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PetRequestFindUniqueOrThrowArgs} args - Arguments to find a PetRequest
     * @example
     * // Get one PetRequest
     * const petRequest = await prisma.petRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PetRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestFindFirstArgs} args - Arguments to find a PetRequest
     * @example
     * // Get one PetRequest
     * const petRequest = await prisma.petRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetRequestFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PetRequestFindFirstArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PetRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestFindFirstOrThrowArgs} args - Arguments to find a PetRequest
     * @example
     * // Get one PetRequest
     * const petRequest = await prisma.petRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PetRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PetRequests
     * const petRequests = await prisma.petRequest.findMany()
     * 
     * // Get first 10 PetRequests
     * const petRequests = await prisma.petRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petRequestWithIdOnly = await prisma.petRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PetRequest.
     * @param {PetRequestCreateArgs} args - Arguments to create a PetRequest.
     * @example
     * // Create one PetRequest
     * const PetRequest = await prisma.petRequest.create({
     *   data: {
     *     // ... data to create a PetRequest
     *   }
     * })
     * 
    **/
    create<T extends PetRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PetRequestCreateArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PetRequests.
     *     @param {PetRequestCreateManyArgs} args - Arguments to create many PetRequests.
     *     @example
     *     // Create many PetRequests
     *     const petRequest = await prisma.petRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PetRequest.
     * @param {PetRequestDeleteArgs} args - Arguments to delete one PetRequest.
     * @example
     * // Delete one PetRequest
     * const PetRequest = await prisma.petRequest.delete({
     *   where: {
     *     // ... filter to delete one PetRequest
     *   }
     * })
     * 
    **/
    delete<T extends PetRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PetRequestDeleteArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PetRequest.
     * @param {PetRequestUpdateArgs} args - Arguments to update one PetRequest.
     * @example
     * // Update one PetRequest
     * const petRequest = await prisma.petRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PetRequestUpdateArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PetRequests.
     * @param {PetRequestDeleteManyArgs} args - Arguments to filter PetRequests to delete.
     * @example
     * // Delete a few PetRequests
     * const { count } = await prisma.petRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PetRequests
     * const petRequest = await prisma.petRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PetRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PetRequest.
     * @param {PetRequestUpsertArgs} args - Arguments to update or create a PetRequest.
     * @example
     * // Update or create a PetRequest
     * const petRequest = await prisma.petRequest.upsert({
     *   create: {
     *     // ... data to create a PetRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PetRequest we want to update
     *   }
     * })
    **/
    upsert<T extends PetRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PetRequestUpsertArgs<ExtArgs>>
    ): Prisma__PetRequestClient<$Result.GetResult<Prisma.$PetRequestPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more PetRequests that matches the filter.
     * @param {PetRequestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const petRequest = await prisma.petRequest.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PetRequestFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a PetRequest.
     * @param {PetRequestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const petRequest = await prisma.petRequest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PetRequestAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of PetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestCountArgs} args - Arguments to filter PetRequests to count.
     * @example
     * // Count the number of PetRequests
     * const count = await prisma.petRequest.count({
     *   where: {
     *     // ... the filter for the PetRequests we want to count
     *   }
     * })
    **/
    count<T extends PetRequestCountArgs>(
      args?: Subset<T, PetRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetRequestAggregateArgs>(args: Subset<T, PetRequestAggregateArgs>): Prisma.PrismaPromise<GetPetRequestAggregateType<T>>

    /**
     * Group by PetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetRequestGroupByArgs['orderBy'] }
        : { orderBy?: PetRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PetRequest model
   */
  readonly fields: PetRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PetRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PetRequest model
   */ 
  interface PetRequestFieldRefs {
    readonly id: FieldRef<"PetRequest", 'String'>
    readonly email: FieldRef<"PetRequest", 'String'>
    readonly fullName: FieldRef<"PetRequest", 'String'>
    readonly contactNumber: FieldRef<"PetRequest", 'String'>
    readonly date: FieldRef<"PetRequest", 'DateTime'>
    readonly type: FieldRef<"PetRequest", 'String'>
    readonly breed: FieldRef<"PetRequest", 'String'>
    readonly sex: FieldRef<"PetRequest", 'String'>
    readonly color: FieldRef<"PetRequest", 'String'>
    readonly agePreference: FieldRef<"PetRequest", 'String'>
    readonly createdAt: FieldRef<"PetRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"PetRequest", 'DateTime'>
    readonly archived: FieldRef<"PetRequest", 'Boolean'>
    readonly userId: FieldRef<"PetRequest", 'String'>
    readonly status: FieldRef<"PetRequest", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PetRequest findUnique
   */
  export type PetRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * Filter, which PetRequest to fetch.
     */
    where: PetRequestWhereUniqueInput
  }


  /**
   * PetRequest findUniqueOrThrow
   */
  export type PetRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * Filter, which PetRequest to fetch.
     */
    where: PetRequestWhereUniqueInput
  }


  /**
   * PetRequest findFirst
   */
  export type PetRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * Filter, which PetRequest to fetch.
     */
    where?: PetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetRequests to fetch.
     */
    orderBy?: PetRequestOrderByWithRelationInput | PetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetRequests.
     */
    cursor?: PetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetRequests.
     */
    distinct?: PetRequestScalarFieldEnum | PetRequestScalarFieldEnum[]
  }


  /**
   * PetRequest findFirstOrThrow
   */
  export type PetRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * Filter, which PetRequest to fetch.
     */
    where?: PetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetRequests to fetch.
     */
    orderBy?: PetRequestOrderByWithRelationInput | PetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetRequests.
     */
    cursor?: PetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetRequests.
     */
    distinct?: PetRequestScalarFieldEnum | PetRequestScalarFieldEnum[]
  }


  /**
   * PetRequest findMany
   */
  export type PetRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * Filter, which PetRequests to fetch.
     */
    where?: PetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetRequests to fetch.
     */
    orderBy?: PetRequestOrderByWithRelationInput | PetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PetRequests.
     */
    cursor?: PetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetRequests.
     */
    skip?: number
    distinct?: PetRequestScalarFieldEnum | PetRequestScalarFieldEnum[]
  }


  /**
   * PetRequest create
   */
  export type PetRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * The data needed to create a PetRequest.
     */
    data: XOR<PetRequestCreateInput, PetRequestUncheckedCreateInput>
  }


  /**
   * PetRequest createMany
   */
  export type PetRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PetRequests.
     */
    data: PetRequestCreateManyInput | PetRequestCreateManyInput[]
  }


  /**
   * PetRequest update
   */
  export type PetRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * The data needed to update a PetRequest.
     */
    data: XOR<PetRequestUpdateInput, PetRequestUncheckedUpdateInput>
    /**
     * Choose, which PetRequest to update.
     */
    where: PetRequestWhereUniqueInput
  }


  /**
   * PetRequest updateMany
   */
  export type PetRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PetRequests.
     */
    data: XOR<PetRequestUpdateManyMutationInput, PetRequestUncheckedUpdateManyInput>
    /**
     * Filter which PetRequests to update
     */
    where?: PetRequestWhereInput
  }


  /**
   * PetRequest upsert
   */
  export type PetRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * The filter to search for the PetRequest to update in case it exists.
     */
    where: PetRequestWhereUniqueInput
    /**
     * In case the PetRequest found by the `where` argument doesn't exist, create a new PetRequest with this data.
     */
    create: XOR<PetRequestCreateInput, PetRequestUncheckedCreateInput>
    /**
     * In case the PetRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetRequestUpdateInput, PetRequestUncheckedUpdateInput>
  }


  /**
   * PetRequest delete
   */
  export type PetRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
    /**
     * Filter which PetRequest to delete.
     */
    where: PetRequestWhereUniqueInput
  }


  /**
   * PetRequest deleteMany
   */
  export type PetRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PetRequests to delete
     */
    where?: PetRequestWhereInput
  }


  /**
   * PetRequest findRaw
   */
  export type PetRequestFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * PetRequest aggregateRaw
   */
  export type PetRequestAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * PetRequest without action
   */
  export type PetRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetRequest
     */
    select?: PetRequestSelect<ExtArgs> | null
  }



  /**
   * Model Adopt
   */

  export type AggregateAdopt = {
    _count: AdoptCountAggregateOutputType | null
    _min: AdoptMinAggregateOutputType | null
    _max: AdoptMaxAggregateOutputType | null
  }

  export type AdoptMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    breed: string | null
    adopter: string | null
    address: string | null
    contact: string | null
    date: Date | null
  }

  export type AdoptMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    breed: string | null
    adopter: string | null
    address: string | null
    contact: string | null
    date: Date | null
  }

  export type AdoptCountAggregateOutputType = {
    id: number
    name: number
    type: number
    breed: number
    adopter: number
    address: number
    contact: number
    date: number
    _all: number
  }


  export type AdoptMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    breed?: true
    adopter?: true
    address?: true
    contact?: true
    date?: true
  }

  export type AdoptMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    breed?: true
    adopter?: true
    address?: true
    contact?: true
    date?: true
  }

  export type AdoptCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    breed?: true
    adopter?: true
    address?: true
    contact?: true
    date?: true
    _all?: true
  }

  export type AdoptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Adopt to aggregate.
     */
    where?: AdoptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adopts to fetch.
     */
    orderBy?: AdoptOrderByWithRelationInput | AdoptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdoptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adopts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adopts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Adopts
    **/
    _count?: true | AdoptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdoptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdoptMaxAggregateInputType
  }

  export type GetAdoptAggregateType<T extends AdoptAggregateArgs> = {
        [P in keyof T & keyof AggregateAdopt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdopt[P]>
      : GetScalarType<T[P], AggregateAdopt[P]>
  }




  export type AdoptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdoptWhereInput
    orderBy?: AdoptOrderByWithAggregationInput | AdoptOrderByWithAggregationInput[]
    by: AdoptScalarFieldEnum[] | AdoptScalarFieldEnum
    having?: AdoptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdoptCountAggregateInputType | true
    _min?: AdoptMinAggregateInputType
    _max?: AdoptMaxAggregateInputType
  }

  export type AdoptGroupByOutputType = {
    id: string
    name: string
    type: string
    breed: string
    adopter: string
    address: string
    contact: string
    date: Date
    _count: AdoptCountAggregateOutputType | null
    _min: AdoptMinAggregateOutputType | null
    _max: AdoptMaxAggregateOutputType | null
  }

  type GetAdoptGroupByPayload<T extends AdoptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdoptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdoptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdoptGroupByOutputType[P]>
            : GetScalarType<T[P], AdoptGroupByOutputType[P]>
        }
      >
    >


  export type AdoptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    breed?: boolean
    adopter?: boolean
    address?: boolean
    contact?: boolean
    date?: boolean
  }, ExtArgs["result"]["adopt"]>

  export type AdoptSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    breed?: boolean
    adopter?: boolean
    address?: boolean
    contact?: boolean
    date?: boolean
  }


  export type $AdoptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Adopt"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      breed: string
      adopter: string
      address: string
      contact: string
      date: Date
    }, ExtArgs["result"]["adopt"]>
    composites: {}
  }


  type AdoptGetPayload<S extends boolean | null | undefined | AdoptDefaultArgs> = $Result.GetResult<Prisma.$AdoptPayload, S>

  type AdoptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdoptFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AdoptCountAggregateInputType | true
    }

  export interface AdoptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Adopt'], meta: { name: 'Adopt' } }
    /**
     * Find zero or one Adopt that matches the filter.
     * @param {AdoptFindUniqueArgs} args - Arguments to find a Adopt
     * @example
     * // Get one Adopt
     * const adopt = await prisma.adopt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdoptFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptFindUniqueArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Adopt that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdoptFindUniqueOrThrowArgs} args - Arguments to find a Adopt
     * @example
     * // Get one Adopt
     * const adopt = await prisma.adopt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdoptFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Adopt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptFindFirstArgs} args - Arguments to find a Adopt
     * @example
     * // Get one Adopt
     * const adopt = await prisma.adopt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdoptFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptFindFirstArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Adopt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptFindFirstOrThrowArgs} args - Arguments to find a Adopt
     * @example
     * // Get one Adopt
     * const adopt = await prisma.adopt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdoptFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Adopts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adopts
     * const adopts = await prisma.adopt.findMany()
     * 
     * // Get first 10 Adopts
     * const adopts = await prisma.adopt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adoptWithIdOnly = await prisma.adopt.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdoptFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Adopt.
     * @param {AdoptCreateArgs} args - Arguments to create a Adopt.
     * @example
     * // Create one Adopt
     * const Adopt = await prisma.adopt.create({
     *   data: {
     *     // ... data to create a Adopt
     *   }
     * })
     * 
    **/
    create<T extends AdoptCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptCreateArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Adopts.
     *     @param {AdoptCreateManyArgs} args - Arguments to create many Adopts.
     *     @example
     *     // Create many Adopts
     *     const adopt = await prisma.adopt.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdoptCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Adopt.
     * @param {AdoptDeleteArgs} args - Arguments to delete one Adopt.
     * @example
     * // Delete one Adopt
     * const Adopt = await prisma.adopt.delete({
     *   where: {
     *     // ... filter to delete one Adopt
     *   }
     * })
     * 
    **/
    delete<T extends AdoptDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptDeleteArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Adopt.
     * @param {AdoptUpdateArgs} args - Arguments to update one Adopt.
     * @example
     * // Update one Adopt
     * const adopt = await prisma.adopt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdoptUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptUpdateArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Adopts.
     * @param {AdoptDeleteManyArgs} args - Arguments to filter Adopts to delete.
     * @example
     * // Delete a few Adopts
     * const { count } = await prisma.adopt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdoptDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdoptDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adopts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adopts
     * const adopt = await prisma.adopt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdoptUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adopt.
     * @param {AdoptUpsertArgs} args - Arguments to update or create a Adopt.
     * @example
     * // Update or create a Adopt
     * const adopt = await prisma.adopt.upsert({
     *   create: {
     *     // ... data to create a Adopt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adopt we want to update
     *   }
     * })
    **/
    upsert<T extends AdoptUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdoptUpsertArgs<ExtArgs>>
    ): Prisma__AdoptClient<$Result.GetResult<Prisma.$AdoptPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Adopts that matches the filter.
     * @param {AdoptFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const adopt = await prisma.adopt.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdoptFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Adopt.
     * @param {AdoptAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const adopt = await prisma.adopt.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdoptAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Adopts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptCountArgs} args - Arguments to filter Adopts to count.
     * @example
     * // Count the number of Adopts
     * const count = await prisma.adopt.count({
     *   where: {
     *     // ... the filter for the Adopts we want to count
     *   }
     * })
    **/
    count<T extends AdoptCountArgs>(
      args?: Subset<T, AdoptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdoptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adopt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdoptAggregateArgs>(args: Subset<T, AdoptAggregateArgs>): Prisma.PrismaPromise<GetAdoptAggregateType<T>>

    /**
     * Group by Adopt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdoptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdoptGroupByArgs['orderBy'] }
        : { orderBy?: AdoptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdoptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdoptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Adopt model
   */
  readonly fields: AdoptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Adopt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdoptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Adopt model
   */ 
  interface AdoptFieldRefs {
    readonly id: FieldRef<"Adopt", 'String'>
    readonly name: FieldRef<"Adopt", 'String'>
    readonly type: FieldRef<"Adopt", 'String'>
    readonly breed: FieldRef<"Adopt", 'String'>
    readonly adopter: FieldRef<"Adopt", 'String'>
    readonly address: FieldRef<"Adopt", 'String'>
    readonly contact: FieldRef<"Adopt", 'String'>
    readonly date: FieldRef<"Adopt", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Adopt findUnique
   */
  export type AdoptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * Filter, which Adopt to fetch.
     */
    where: AdoptWhereUniqueInput
  }


  /**
   * Adopt findUniqueOrThrow
   */
  export type AdoptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * Filter, which Adopt to fetch.
     */
    where: AdoptWhereUniqueInput
  }


  /**
   * Adopt findFirst
   */
  export type AdoptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * Filter, which Adopt to fetch.
     */
    where?: AdoptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adopts to fetch.
     */
    orderBy?: AdoptOrderByWithRelationInput | AdoptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adopts.
     */
    cursor?: AdoptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adopts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adopts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adopts.
     */
    distinct?: AdoptScalarFieldEnum | AdoptScalarFieldEnum[]
  }


  /**
   * Adopt findFirstOrThrow
   */
  export type AdoptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * Filter, which Adopt to fetch.
     */
    where?: AdoptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adopts to fetch.
     */
    orderBy?: AdoptOrderByWithRelationInput | AdoptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adopts.
     */
    cursor?: AdoptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adopts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adopts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adopts.
     */
    distinct?: AdoptScalarFieldEnum | AdoptScalarFieldEnum[]
  }


  /**
   * Adopt findMany
   */
  export type AdoptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * Filter, which Adopts to fetch.
     */
    where?: AdoptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adopts to fetch.
     */
    orderBy?: AdoptOrderByWithRelationInput | AdoptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Adopts.
     */
    cursor?: AdoptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adopts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adopts.
     */
    skip?: number
    distinct?: AdoptScalarFieldEnum | AdoptScalarFieldEnum[]
  }


  /**
   * Adopt create
   */
  export type AdoptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * The data needed to create a Adopt.
     */
    data: XOR<AdoptCreateInput, AdoptUncheckedCreateInput>
  }


  /**
   * Adopt createMany
   */
  export type AdoptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Adopts.
     */
    data: AdoptCreateManyInput | AdoptCreateManyInput[]
  }


  /**
   * Adopt update
   */
  export type AdoptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * The data needed to update a Adopt.
     */
    data: XOR<AdoptUpdateInput, AdoptUncheckedUpdateInput>
    /**
     * Choose, which Adopt to update.
     */
    where: AdoptWhereUniqueInput
  }


  /**
   * Adopt updateMany
   */
  export type AdoptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Adopts.
     */
    data: XOR<AdoptUpdateManyMutationInput, AdoptUncheckedUpdateManyInput>
    /**
     * Filter which Adopts to update
     */
    where?: AdoptWhereInput
  }


  /**
   * Adopt upsert
   */
  export type AdoptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * The filter to search for the Adopt to update in case it exists.
     */
    where: AdoptWhereUniqueInput
    /**
     * In case the Adopt found by the `where` argument doesn't exist, create a new Adopt with this data.
     */
    create: XOR<AdoptCreateInput, AdoptUncheckedCreateInput>
    /**
     * In case the Adopt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdoptUpdateInput, AdoptUncheckedUpdateInput>
  }


  /**
   * Adopt delete
   */
  export type AdoptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
    /**
     * Filter which Adopt to delete.
     */
    where: AdoptWhereUniqueInput
  }


  /**
   * Adopt deleteMany
   */
  export type AdoptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Adopts to delete
     */
    where?: AdoptWhereInput
  }


  /**
   * Adopt findRaw
   */
  export type AdoptFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Adopt aggregateRaw
   */
  export type AdoptAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Adopt without action
   */
  export type AdoptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adopt
     */
    select?: AdoptSelect<ExtArgs> | null
  }



  /**
   * Model Donation
   */

  export type AggregateDonation = {
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  export type DonationAvgAggregateOutputType = {
    amount: number | null
    reference: number | null
  }

  export type DonationSumAggregateOutputType = {
    amount: number | null
    reference: number | null
  }

  export type DonationMinAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    amount: number | null
    reference: number | null
    payment: string | null
  }

  export type DonationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    amount: number | null
    reference: number | null
    payment: string | null
  }

  export type DonationCountAggregateOutputType = {
    id: number
    name: number
    date: number
    amount: number
    reference: number
    payment: number
    _all: number
  }


  export type DonationAvgAggregateInputType = {
    amount?: true
    reference?: true
  }

  export type DonationSumAggregateInputType = {
    amount?: true
    reference?: true
  }

  export type DonationMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    amount?: true
    reference?: true
    payment?: true
  }

  export type DonationMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    amount?: true
    reference?: true
    payment?: true
  }

  export type DonationCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    amount?: true
    reference?: true
    payment?: true
    _all?: true
  }

  export type DonationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Donation to aggregate.
     */
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     */
    orderBy?: DonationOrderByWithRelationInput | DonationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Donations
    **/
    _count?: true | DonationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationMaxAggregateInputType
  }

  export type GetDonationAggregateType<T extends DonationAggregateArgs> = {
        [P in keyof T & keyof AggregateDonation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonation[P]>
      : GetScalarType<T[P], AggregateDonation[P]>
  }




  export type DonationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationWhereInput
    orderBy?: DonationOrderByWithAggregationInput | DonationOrderByWithAggregationInput[]
    by: DonationScalarFieldEnum[] | DonationScalarFieldEnum
    having?: DonationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationCountAggregateInputType | true
    _avg?: DonationAvgAggregateInputType
    _sum?: DonationSumAggregateInputType
    _min?: DonationMinAggregateInputType
    _max?: DonationMaxAggregateInputType
  }

  export type DonationGroupByOutputType = {
    id: string
    name: string
    date: Date
    amount: number
    reference: number
    payment: string
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  type GetDonationGroupByPayload<T extends DonationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationGroupByOutputType[P]>
            : GetScalarType<T[P], DonationGroupByOutputType[P]>
        }
      >
    >


  export type DonationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    amount?: boolean
    reference?: boolean
    payment?: boolean
  }, ExtArgs["result"]["donation"]>

  export type DonationSelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    amount?: boolean
    reference?: boolean
    payment?: boolean
  }


  export type $DonationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Donation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      date: Date
      amount: number
      reference: number
      payment: string
    }, ExtArgs["result"]["donation"]>
    composites: {}
  }


  type DonationGetPayload<S extends boolean | null | undefined | DonationDefaultArgs> = $Result.GetResult<Prisma.$DonationPayload, S>

  type DonationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DonationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DonationCountAggregateInputType | true
    }

  export interface DonationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Donation'], meta: { name: 'Donation' } }
    /**
     * Find zero or one Donation that matches the filter.
     * @param {DonationFindUniqueArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DonationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DonationFindUniqueArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Donation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DonationFindUniqueOrThrowArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DonationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Donation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationFindFirstArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DonationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationFindFirstArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Donation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationFindFirstOrThrowArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DonationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Donations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donations
     * const donations = await prisma.donation.findMany()
     * 
     * // Get first 10 Donations
     * const donations = await prisma.donation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationWithIdOnly = await prisma.donation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DonationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Donation.
     * @param {DonationCreateArgs} args - Arguments to create a Donation.
     * @example
     * // Create one Donation
     * const Donation = await prisma.donation.create({
     *   data: {
     *     // ... data to create a Donation
     *   }
     * })
     * 
    **/
    create<T extends DonationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DonationCreateArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Donations.
     *     @param {DonationCreateManyArgs} args - Arguments to create many Donations.
     *     @example
     *     // Create many Donations
     *     const donation = await prisma.donation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DonationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Donation.
     * @param {DonationDeleteArgs} args - Arguments to delete one Donation.
     * @example
     * // Delete one Donation
     * const Donation = await prisma.donation.delete({
     *   where: {
     *     // ... filter to delete one Donation
     *   }
     * })
     * 
    **/
    delete<T extends DonationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DonationDeleteArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Donation.
     * @param {DonationUpdateArgs} args - Arguments to update one Donation.
     * @example
     * // Update one Donation
     * const donation = await prisma.donation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DonationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DonationUpdateArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Donations.
     * @param {DonationDeleteManyArgs} args - Arguments to filter Donations to delete.
     * @example
     * // Delete a few Donations
     * const { count } = await prisma.donation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DonationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DonationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donations
     * const donation = await prisma.donation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DonationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DonationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Donation.
     * @param {DonationUpsertArgs} args - Arguments to update or create a Donation.
     * @example
     * // Update or create a Donation
     * const donation = await prisma.donation.upsert({
     *   create: {
     *     // ... data to create a Donation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donation we want to update
     *   }
     * })
    **/
    upsert<T extends DonationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DonationUpsertArgs<ExtArgs>>
    ): Prisma__DonationClient<$Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Donations that matches the filter.
     * @param {DonationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const donation = await prisma.donation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DonationFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Donation.
     * @param {DonationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const donation = await prisma.donation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DonationAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationCountArgs} args - Arguments to filter Donations to count.
     * @example
     * // Count the number of Donations
     * const count = await prisma.donation.count({
     *   where: {
     *     // ... the filter for the Donations we want to count
     *   }
     * })
    **/
    count<T extends DonationCountArgs>(
      args?: Subset<T, DonationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationAggregateArgs>(args: Subset<T, DonationAggregateArgs>): Prisma.PrismaPromise<GetDonationAggregateType<T>>

    /**
     * Group by Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationGroupByArgs['orderBy'] }
        : { orderBy?: DonationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Donation model
   */
  readonly fields: DonationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Donation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DonationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Donation model
   */ 
  interface DonationFieldRefs {
    readonly id: FieldRef<"Donation", 'String'>
    readonly name: FieldRef<"Donation", 'String'>
    readonly date: FieldRef<"Donation", 'DateTime'>
    readonly amount: FieldRef<"Donation", 'Float'>
    readonly reference: FieldRef<"Donation", 'Int'>
    readonly payment: FieldRef<"Donation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Donation findUnique
   */
  export type DonationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * Filter, which Donation to fetch.
     */
    where: DonationWhereUniqueInput
  }


  /**
   * Donation findUniqueOrThrow
   */
  export type DonationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * Filter, which Donation to fetch.
     */
    where: DonationWhereUniqueInput
  }


  /**
   * Donation findFirst
   */
  export type DonationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * Filter, which Donation to fetch.
     */
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     */
    orderBy?: DonationOrderByWithRelationInput | DonationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Donations.
     */
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Donations.
     */
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }


  /**
   * Donation findFirstOrThrow
   */
  export type DonationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * Filter, which Donation to fetch.
     */
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     */
    orderBy?: DonationOrderByWithRelationInput | DonationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Donations.
     */
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Donations.
     */
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }


  /**
   * Donation findMany
   */
  export type DonationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * Filter, which Donations to fetch.
     */
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     */
    orderBy?: DonationOrderByWithRelationInput | DonationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Donations.
     */
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     */
    skip?: number
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }


  /**
   * Donation create
   */
  export type DonationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * The data needed to create a Donation.
     */
    data: XOR<DonationCreateInput, DonationUncheckedCreateInput>
  }


  /**
   * Donation createMany
   */
  export type DonationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Donations.
     */
    data: DonationCreateManyInput | DonationCreateManyInput[]
  }


  /**
   * Donation update
   */
  export type DonationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * The data needed to update a Donation.
     */
    data: XOR<DonationUpdateInput, DonationUncheckedUpdateInput>
    /**
     * Choose, which Donation to update.
     */
    where: DonationWhereUniqueInput
  }


  /**
   * Donation updateMany
   */
  export type DonationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Donations.
     */
    data: XOR<DonationUpdateManyMutationInput, DonationUncheckedUpdateManyInput>
    /**
     * Filter which Donations to update
     */
    where?: DonationWhereInput
  }


  /**
   * Donation upsert
   */
  export type DonationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * The filter to search for the Donation to update in case it exists.
     */
    where: DonationWhereUniqueInput
    /**
     * In case the Donation found by the `where` argument doesn't exist, create a new Donation with this data.
     */
    create: XOR<DonationCreateInput, DonationUncheckedCreateInput>
    /**
     * In case the Donation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DonationUpdateInput, DonationUncheckedUpdateInput>
  }


  /**
   * Donation delete
   */
  export type DonationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
    /**
     * Filter which Donation to delete.
     */
    where: DonationWhereUniqueInput
  }


  /**
   * Donation deleteMany
   */
  export type DonationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Donations to delete
     */
    where?: DonationWhereInput
  }


  /**
   * Donation findRaw
   */
  export type DonationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Donation aggregateRaw
   */
  export type DonationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Donation without action
   */
  export type DonationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donation
     */
    select?: DonationSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const AdminScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    validId: 'validId',
    selfieId: 'selfieId',
    fullname: 'fullname',
    username: 'username',
    email: 'email',
    password: 'password',
    contact: 'contact',
    facebookLink: 'facebookLink',
    petowner: 'petowner',
    address: 'address',
    accountStatus: 'accountStatus',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    content: 'content',
    sender: 'sender',
    recipient: 'recipient',
    timestamp: 'timestamp',
    status: 'status',
    link: 'link',
    metadata: 'metadata'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    breed: 'breed',
    age: 'age',
    color: 'color',
    gender: 'gender',
    description: 'description',
    petType: 'petType',
    image: 'image',
    image2: 'image2',
    image3: 'image3',
    image4: 'image4',
    adopter: 'adopter',
    adopted: 'adopted'
  };

  export type PetScalarFieldEnum = (typeof PetScalarFieldEnum)[keyof typeof PetScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    completeLocation: 'completeLocation',
    landmark: 'landmark',
    petstatus: 'petstatus',
    email: 'email',
    phone: 'phone',
    petImage: 'petImage',
    message: 'message',
    archived: 'archived',
    reportstatus: 'reportstatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    status: 'status'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const SurrenderScalarFieldEnum: {
    id: 'id',
    email: 'email',
    date: 'date',
    ownerName: 'ownerName',
    contact: 'contact',
    fullAddress: 'fullAddress',
    petType: 'petType',
    petName: 'petName',
    dateOfBirth: 'dateOfBirth',
    breed: 'breed',
    color: 'color',
    sex: 'sex',
    spayedNeutered: 'spayedNeutered',
    vaccinated: 'vaccinated',
    medicalConcerns: 'medicalConcerns',
    currentMedicalIssues: 'currentMedicalIssues',
    aggression: 'aggression',
    biting: 'biting',
    leashCageTrained: 'leashCageTrained',
    goodWithOtherPets: 'goodWithOtherPets',
    goodWithChildren: 'goodWithChildren',
    indoorOutdoor: 'indoorOutdoor',
    paymentMethod: 'paymentMethod',
    agreementAccepted: 'agreementAccepted',
    validId: 'validId',
    selfie: 'selfie',
    petpic: 'petpic',
    archived: 'archived',
    userId: 'userId',
    status: 'status'
  };

  export type SurrenderScalarFieldEnum = (typeof SurrenderScalarFieldEnum)[keyof typeof SurrenderScalarFieldEnum]


  export const ContactFormEntryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContactFormEntryScalarFieldEnum = (typeof ContactFormEntryScalarFieldEnum)[keyof typeof ContactFormEntryScalarFieldEnum]


  export const AdoptionScalarFieldEnum: {
    id: 'id',
    email: 'email',
    fullName: 'fullName',
    petType: 'petType',
    petName: 'petName',
    existingPets: 'existingPets',
    visitDate: 'visitDate',
    agreeToAdopt: 'agreeToAdopt',
    promiseToCare: 'promiseToCare',
    acceptTerms: 'acceptTerms',
    address: 'address',
    contactNumber: 'contactNumber',
    contractDate: 'contractDate',
    facebookLink: 'facebookLink',
    validId: 'validId',
    petStayingPhoto: 'petStayingPhoto',
    selfie: 'selfie',
    archived: 'archived',
    petId: 'petId',
    userId: 'userId',
    status: 'status'
  };

  export type AdoptionScalarFieldEnum = (typeof AdoptionScalarFieldEnum)[keyof typeof AdoptionScalarFieldEnum]


  export const PetRequestScalarFieldEnum: {
    id: 'id',
    email: 'email',
    fullName: 'fullName',
    contactNumber: 'contactNumber',
    date: 'date',
    type: 'type',
    breed: 'breed',
    sex: 'sex',
    color: 'color',
    agePreference: 'agePreference',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    archived: 'archived',
    userId: 'userId',
    status: 'status'
  };

  export type PetRequestScalarFieldEnum = (typeof PetRequestScalarFieldEnum)[keyof typeof PetRequestScalarFieldEnum]


  export const AdoptScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    breed: 'breed',
    adopter: 'adopter',
    address: 'address',
    contact: 'contact',
    date: 'date'
  };

  export type AdoptScalarFieldEnum = (typeof AdoptScalarFieldEnum)[keyof typeof AdoptScalarFieldEnum]


  export const DonationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    amount: 'amount',
    reference: 'reference',
    payment: 'payment'
  };

  export type DonationScalarFieldEnum = (typeof DonationScalarFieldEnum)[keyof typeof DonationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    fullname?: StringNullableFilter<"Admin"> | string | null
    username?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    fullname?: StringNullableFilter<"Admin"> | string | null
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    fullname?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    username?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    validId?: StringNullableFilter<"User"> | string | null
    selfieId?: StringNullableFilter<"User"> | string | null
    fullname?: StringNullableFilter<"User"> | string | null
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    contact?: StringNullableFilter<"User"> | string | null
    facebookLink?: StringNullableFilter<"User"> | string | null
    petowner?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    accountStatus?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    validId?: SortOrder
    selfieId?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    contact?: SortOrder
    facebookLink?: SortOrder
    petowner?: SortOrder
    address?: SortOrder
    accountStatus?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    validId?: StringNullableFilter<"User"> | string | null
    selfieId?: StringNullableFilter<"User"> | string | null
    fullname?: StringNullableFilter<"User"> | string | null
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    contact?: StringNullableFilter<"User"> | string | null
    facebookLink?: StringNullableFilter<"User"> | string | null
    petowner?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    accountStatus?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    validId?: SortOrder
    selfieId?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    contact?: SortOrder
    facebookLink?: SortOrder
    petowner?: SortOrder
    address?: SortOrder
    accountStatus?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    validId?: StringNullableWithAggregatesFilter<"User"> | string | null
    selfieId?: StringNullableWithAggregatesFilter<"User"> | string | null
    fullname?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    contact?: StringNullableWithAggregatesFilter<"User"> | string | null
    facebookLink?: StringNullableWithAggregatesFilter<"User"> | string | null
    petowner?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    accountStatus?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringNullableFilter<"Notification"> | string | null
    content?: StringNullableFilter<"Notification"> | string | null
    sender?: StringNullableFilter<"Notification"> | string | null
    recipient?: StringNullableFilter<"Notification"> | string | null
    timestamp?: DateTimeFilter<"Notification"> | Date | string
    status?: StringNullableFilter<"Notification"> | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    link?: SortOrder
    metadata?: SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringNullableFilter<"Notification"> | string | null
    content?: StringNullableFilter<"Notification"> | string | null
    sender?: StringNullableFilter<"Notification"> | string | null
    recipient?: StringNullableFilter<"Notification"> | string | null
    timestamp?: DateTimeFilter<"Notification"> | Date | string
    status?: StringNullableFilter<"Notification"> | string | null
    link?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    link?: SortOrder
    metadata?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    content?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    sender?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    recipient?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    status?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    link?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
  }

  export type PetWhereInput = {
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    id?: StringFilter<"Pet"> | string
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    age?: IntFilter<"Pet"> | number
    color?: StringFilter<"Pet"> | string
    gender?: StringFilter<"Pet"> | string
    description?: StringNullableFilter<"Pet"> | string | null
    petType?: StringNullableFilter<"Pet"> | string | null
    image?: StringNullableFilter<"Pet"> | string | null
    image2?: StringNullableFilter<"Pet"> | string | null
    image3?: StringNullableFilter<"Pet"> | string | null
    image4?: StringNullableFilter<"Pet"> | string | null
    adopter?: StringNullableFilter<"Pet"> | string | null
    adopted?: BoolFilter<"Pet"> | boolean
  }

  export type PetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    color?: SortOrder
    gender?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    image?: SortOrder
    image2?: SortOrder
    image3?: SortOrder
    image4?: SortOrder
    adopter?: SortOrder
    adopted?: SortOrder
  }

  export type PetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    age?: IntFilter<"Pet"> | number
    color?: StringFilter<"Pet"> | string
    gender?: StringFilter<"Pet"> | string
    description?: StringNullableFilter<"Pet"> | string | null
    petType?: StringNullableFilter<"Pet"> | string | null
    image?: StringNullableFilter<"Pet"> | string | null
    image2?: StringNullableFilter<"Pet"> | string | null
    image3?: StringNullableFilter<"Pet"> | string | null
    image4?: StringNullableFilter<"Pet"> | string | null
    adopter?: StringNullableFilter<"Pet"> | string | null
    adopted?: BoolFilter<"Pet"> | boolean
  }, "id">

  export type PetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    color?: SortOrder
    gender?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    image?: SortOrder
    image2?: SortOrder
    image3?: SortOrder
    image4?: SortOrder
    adopter?: SortOrder
    adopted?: SortOrder
    _count?: PetCountOrderByAggregateInput
    _avg?: PetAvgOrderByAggregateInput
    _max?: PetMaxOrderByAggregateInput
    _min?: PetMinOrderByAggregateInput
    _sum?: PetSumOrderByAggregateInput
  }

  export type PetScalarWhereWithAggregatesInput = {
    AND?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    OR?: PetScalarWhereWithAggregatesInput[]
    NOT?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pet"> | string
    name?: StringWithAggregatesFilter<"Pet"> | string
    breed?: StringWithAggregatesFilter<"Pet"> | string
    age?: IntWithAggregatesFilter<"Pet"> | number
    color?: StringWithAggregatesFilter<"Pet"> | string
    gender?: StringWithAggregatesFilter<"Pet"> | string
    description?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    petType?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    image?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    image2?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    image3?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    image4?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    adopter?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    adopted?: BoolWithAggregatesFilter<"Pet"> | boolean
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    completeLocation?: StringFilter<"Report"> | string
    landmark?: StringFilter<"Report"> | string
    petstatus?: StringFilter<"Report"> | string
    email?: StringFilter<"Report"> | string
    phone?: StringFilter<"Report"> | string
    petImage?: StringNullableFilter<"Report"> | string | null
    message?: StringFilter<"Report"> | string
    archived?: BoolFilter<"Report"> | boolean
    reportstatus?: BoolFilter<"Report"> | boolean
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    userId?: StringFilter<"Report"> | string
    status?: StringNullableFilter<"Report"> | string | null
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    completeLocation?: SortOrder
    landmark?: SortOrder
    petstatus?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    petImage?: SortOrder
    message?: SortOrder
    archived?: SortOrder
    reportstatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    completeLocation?: StringFilter<"Report"> | string
    landmark?: StringFilter<"Report"> | string
    petstatus?: StringFilter<"Report"> | string
    email?: StringFilter<"Report"> | string
    phone?: StringFilter<"Report"> | string
    petImage?: StringNullableFilter<"Report"> | string | null
    message?: StringFilter<"Report"> | string
    archived?: BoolFilter<"Report"> | boolean
    reportstatus?: BoolFilter<"Report"> | boolean
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    userId?: StringFilter<"Report"> | string
    status?: StringNullableFilter<"Report"> | string | null
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    completeLocation?: SortOrder
    landmark?: SortOrder
    petstatus?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    petImage?: SortOrder
    message?: SortOrder
    archived?: SortOrder
    reportstatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    completeLocation?: StringWithAggregatesFilter<"Report"> | string
    landmark?: StringWithAggregatesFilter<"Report"> | string
    petstatus?: StringWithAggregatesFilter<"Report"> | string
    email?: StringWithAggregatesFilter<"Report"> | string
    phone?: StringWithAggregatesFilter<"Report"> | string
    petImage?: StringNullableWithAggregatesFilter<"Report"> | string | null
    message?: StringWithAggregatesFilter<"Report"> | string
    archived?: BoolWithAggregatesFilter<"Report"> | boolean
    reportstatus?: BoolWithAggregatesFilter<"Report"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    userId?: StringWithAggregatesFilter<"Report"> | string
    status?: StringNullableWithAggregatesFilter<"Report"> | string | null
  }

  export type SurrenderWhereInput = {
    AND?: SurrenderWhereInput | SurrenderWhereInput[]
    OR?: SurrenderWhereInput[]
    NOT?: SurrenderWhereInput | SurrenderWhereInput[]
    id?: StringFilter<"Surrender"> | string
    email?: StringFilter<"Surrender"> | string
    date?: DateTimeFilter<"Surrender"> | Date | string
    ownerName?: StringFilter<"Surrender"> | string
    contact?: StringFilter<"Surrender"> | string
    fullAddress?: StringFilter<"Surrender"> | string
    petType?: StringFilter<"Surrender"> | string
    petName?: StringFilter<"Surrender"> | string
    dateOfBirth?: DateTimeFilter<"Surrender"> | Date | string
    breed?: StringFilter<"Surrender"> | string
    color?: StringFilter<"Surrender"> | string
    sex?: StringFilter<"Surrender"> | string
    spayedNeutered?: StringFilter<"Surrender"> | string
    vaccinated?: StringFilter<"Surrender"> | string
    medicalConcerns?: StringFilter<"Surrender"> | string
    currentMedicalIssues?: StringFilter<"Surrender"> | string
    aggression?: StringFilter<"Surrender"> | string
    biting?: StringFilter<"Surrender"> | string
    leashCageTrained?: StringFilter<"Surrender"> | string
    goodWithOtherPets?: StringFilter<"Surrender"> | string
    goodWithChildren?: StringFilter<"Surrender"> | string
    indoorOutdoor?: StringFilter<"Surrender"> | string
    paymentMethod?: StringFilter<"Surrender"> | string
    agreementAccepted?: BoolFilter<"Surrender"> | boolean
    validId?: StringNullableFilter<"Surrender"> | string | null
    selfie?: StringNullableFilter<"Surrender"> | string | null
    petpic?: StringNullableFilter<"Surrender"> | string | null
    archived?: BoolFilter<"Surrender"> | boolean
    userId?: StringFilter<"Surrender"> | string
    status?: StringNullableFilter<"Surrender"> | string | null
  }

  export type SurrenderOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    date?: SortOrder
    ownerName?: SortOrder
    contact?: SortOrder
    fullAddress?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    dateOfBirth?: SortOrder
    breed?: SortOrder
    color?: SortOrder
    sex?: SortOrder
    spayedNeutered?: SortOrder
    vaccinated?: SortOrder
    medicalConcerns?: SortOrder
    currentMedicalIssues?: SortOrder
    aggression?: SortOrder
    biting?: SortOrder
    leashCageTrained?: SortOrder
    goodWithOtherPets?: SortOrder
    goodWithChildren?: SortOrder
    indoorOutdoor?: SortOrder
    paymentMethod?: SortOrder
    agreementAccepted?: SortOrder
    validId?: SortOrder
    selfie?: SortOrder
    petpic?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type SurrenderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SurrenderWhereInput | SurrenderWhereInput[]
    OR?: SurrenderWhereInput[]
    NOT?: SurrenderWhereInput | SurrenderWhereInput[]
    email?: StringFilter<"Surrender"> | string
    date?: DateTimeFilter<"Surrender"> | Date | string
    ownerName?: StringFilter<"Surrender"> | string
    contact?: StringFilter<"Surrender"> | string
    fullAddress?: StringFilter<"Surrender"> | string
    petType?: StringFilter<"Surrender"> | string
    petName?: StringFilter<"Surrender"> | string
    dateOfBirth?: DateTimeFilter<"Surrender"> | Date | string
    breed?: StringFilter<"Surrender"> | string
    color?: StringFilter<"Surrender"> | string
    sex?: StringFilter<"Surrender"> | string
    spayedNeutered?: StringFilter<"Surrender"> | string
    vaccinated?: StringFilter<"Surrender"> | string
    medicalConcerns?: StringFilter<"Surrender"> | string
    currentMedicalIssues?: StringFilter<"Surrender"> | string
    aggression?: StringFilter<"Surrender"> | string
    biting?: StringFilter<"Surrender"> | string
    leashCageTrained?: StringFilter<"Surrender"> | string
    goodWithOtherPets?: StringFilter<"Surrender"> | string
    goodWithChildren?: StringFilter<"Surrender"> | string
    indoorOutdoor?: StringFilter<"Surrender"> | string
    paymentMethod?: StringFilter<"Surrender"> | string
    agreementAccepted?: BoolFilter<"Surrender"> | boolean
    validId?: StringNullableFilter<"Surrender"> | string | null
    selfie?: StringNullableFilter<"Surrender"> | string | null
    petpic?: StringNullableFilter<"Surrender"> | string | null
    archived?: BoolFilter<"Surrender"> | boolean
    userId?: StringFilter<"Surrender"> | string
    status?: StringNullableFilter<"Surrender"> | string | null
  }, "id">

  export type SurrenderOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    date?: SortOrder
    ownerName?: SortOrder
    contact?: SortOrder
    fullAddress?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    dateOfBirth?: SortOrder
    breed?: SortOrder
    color?: SortOrder
    sex?: SortOrder
    spayedNeutered?: SortOrder
    vaccinated?: SortOrder
    medicalConcerns?: SortOrder
    currentMedicalIssues?: SortOrder
    aggression?: SortOrder
    biting?: SortOrder
    leashCageTrained?: SortOrder
    goodWithOtherPets?: SortOrder
    goodWithChildren?: SortOrder
    indoorOutdoor?: SortOrder
    paymentMethod?: SortOrder
    agreementAccepted?: SortOrder
    validId?: SortOrder
    selfie?: SortOrder
    petpic?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    _count?: SurrenderCountOrderByAggregateInput
    _max?: SurrenderMaxOrderByAggregateInput
    _min?: SurrenderMinOrderByAggregateInput
  }

  export type SurrenderScalarWhereWithAggregatesInput = {
    AND?: SurrenderScalarWhereWithAggregatesInput | SurrenderScalarWhereWithAggregatesInput[]
    OR?: SurrenderScalarWhereWithAggregatesInput[]
    NOT?: SurrenderScalarWhereWithAggregatesInput | SurrenderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Surrender"> | string
    email?: StringWithAggregatesFilter<"Surrender"> | string
    date?: DateTimeWithAggregatesFilter<"Surrender"> | Date | string
    ownerName?: StringWithAggregatesFilter<"Surrender"> | string
    contact?: StringWithAggregatesFilter<"Surrender"> | string
    fullAddress?: StringWithAggregatesFilter<"Surrender"> | string
    petType?: StringWithAggregatesFilter<"Surrender"> | string
    petName?: StringWithAggregatesFilter<"Surrender"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"Surrender"> | Date | string
    breed?: StringWithAggregatesFilter<"Surrender"> | string
    color?: StringWithAggregatesFilter<"Surrender"> | string
    sex?: StringWithAggregatesFilter<"Surrender"> | string
    spayedNeutered?: StringWithAggregatesFilter<"Surrender"> | string
    vaccinated?: StringWithAggregatesFilter<"Surrender"> | string
    medicalConcerns?: StringWithAggregatesFilter<"Surrender"> | string
    currentMedicalIssues?: StringWithAggregatesFilter<"Surrender"> | string
    aggression?: StringWithAggregatesFilter<"Surrender"> | string
    biting?: StringWithAggregatesFilter<"Surrender"> | string
    leashCageTrained?: StringWithAggregatesFilter<"Surrender"> | string
    goodWithOtherPets?: StringWithAggregatesFilter<"Surrender"> | string
    goodWithChildren?: StringWithAggregatesFilter<"Surrender"> | string
    indoorOutdoor?: StringWithAggregatesFilter<"Surrender"> | string
    paymentMethod?: StringWithAggregatesFilter<"Surrender"> | string
    agreementAccepted?: BoolWithAggregatesFilter<"Surrender"> | boolean
    validId?: StringNullableWithAggregatesFilter<"Surrender"> | string | null
    selfie?: StringNullableWithAggregatesFilter<"Surrender"> | string | null
    petpic?: StringNullableWithAggregatesFilter<"Surrender"> | string | null
    archived?: BoolWithAggregatesFilter<"Surrender"> | boolean
    userId?: StringWithAggregatesFilter<"Surrender"> | string
    status?: StringNullableWithAggregatesFilter<"Surrender"> | string | null
  }

  export type ContactFormEntryWhereInput = {
    AND?: ContactFormEntryWhereInput | ContactFormEntryWhereInput[]
    OR?: ContactFormEntryWhereInput[]
    NOT?: ContactFormEntryWhereInput | ContactFormEntryWhereInput[]
    id?: StringFilter<"ContactFormEntry"> | string
    name?: StringFilter<"ContactFormEntry"> | string
    email?: StringFilter<"ContactFormEntry"> | string
    phone?: StringFilter<"ContactFormEntry"> | string
    message?: StringFilter<"ContactFormEntry"> | string
    createdAt?: DateTimeFilter<"ContactFormEntry"> | Date | string
    updatedAt?: DateTimeFilter<"ContactFormEntry"> | Date | string
  }

  export type ContactFormEntryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactFormEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactFormEntryWhereInput | ContactFormEntryWhereInput[]
    OR?: ContactFormEntryWhereInput[]
    NOT?: ContactFormEntryWhereInput | ContactFormEntryWhereInput[]
    name?: StringFilter<"ContactFormEntry"> | string
    email?: StringFilter<"ContactFormEntry"> | string
    phone?: StringFilter<"ContactFormEntry"> | string
    message?: StringFilter<"ContactFormEntry"> | string
    createdAt?: DateTimeFilter<"ContactFormEntry"> | Date | string
    updatedAt?: DateTimeFilter<"ContactFormEntry"> | Date | string
  }, "id">

  export type ContactFormEntryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContactFormEntryCountOrderByAggregateInput
    _max?: ContactFormEntryMaxOrderByAggregateInput
    _min?: ContactFormEntryMinOrderByAggregateInput
  }

  export type ContactFormEntryScalarWhereWithAggregatesInput = {
    AND?: ContactFormEntryScalarWhereWithAggregatesInput | ContactFormEntryScalarWhereWithAggregatesInput[]
    OR?: ContactFormEntryScalarWhereWithAggregatesInput[]
    NOT?: ContactFormEntryScalarWhereWithAggregatesInput | ContactFormEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContactFormEntry"> | string
    name?: StringWithAggregatesFilter<"ContactFormEntry"> | string
    email?: StringWithAggregatesFilter<"ContactFormEntry"> | string
    phone?: StringWithAggregatesFilter<"ContactFormEntry"> | string
    message?: StringWithAggregatesFilter<"ContactFormEntry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ContactFormEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContactFormEntry"> | Date | string
  }

  export type AdoptionWhereInput = {
    AND?: AdoptionWhereInput | AdoptionWhereInput[]
    OR?: AdoptionWhereInput[]
    NOT?: AdoptionWhereInput | AdoptionWhereInput[]
    id?: StringFilter<"Adoption"> | string
    email?: StringFilter<"Adoption"> | string
    fullName?: StringFilter<"Adoption"> | string
    petType?: StringFilter<"Adoption"> | string
    petName?: StringFilter<"Adoption"> | string
    existingPets?: StringFilter<"Adoption"> | string
    visitDate?: DateTimeFilter<"Adoption"> | Date | string
    agreeToAdopt?: BoolFilter<"Adoption"> | boolean
    promiseToCare?: BoolFilter<"Adoption"> | boolean
    acceptTerms?: BoolFilter<"Adoption"> | boolean
    address?: StringFilter<"Adoption"> | string
    contactNumber?: StringFilter<"Adoption"> | string
    contractDate?: DateTimeFilter<"Adoption"> | Date | string
    facebookLink?: StringFilter<"Adoption"> | string
    validId?: StringNullableFilter<"Adoption"> | string | null
    petStayingPhoto?: StringNullableFilter<"Adoption"> | string | null
    selfie?: StringNullableFilter<"Adoption"> | string | null
    archived?: BoolFilter<"Adoption"> | boolean
    petId?: StringFilter<"Adoption"> | string
    userId?: StringFilter<"Adoption"> | string
    status?: StringNullableFilter<"Adoption"> | string | null
  }

  export type AdoptionOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    existingPets?: SortOrder
    visitDate?: SortOrder
    agreeToAdopt?: SortOrder
    promiseToCare?: SortOrder
    acceptTerms?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    contractDate?: SortOrder
    facebookLink?: SortOrder
    validId?: SortOrder
    petStayingPhoto?: SortOrder
    selfie?: SortOrder
    archived?: SortOrder
    petId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type AdoptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdoptionWhereInput | AdoptionWhereInput[]
    OR?: AdoptionWhereInput[]
    NOT?: AdoptionWhereInput | AdoptionWhereInput[]
    email?: StringFilter<"Adoption"> | string
    fullName?: StringFilter<"Adoption"> | string
    petType?: StringFilter<"Adoption"> | string
    petName?: StringFilter<"Adoption"> | string
    existingPets?: StringFilter<"Adoption"> | string
    visitDate?: DateTimeFilter<"Adoption"> | Date | string
    agreeToAdopt?: BoolFilter<"Adoption"> | boolean
    promiseToCare?: BoolFilter<"Adoption"> | boolean
    acceptTerms?: BoolFilter<"Adoption"> | boolean
    address?: StringFilter<"Adoption"> | string
    contactNumber?: StringFilter<"Adoption"> | string
    contractDate?: DateTimeFilter<"Adoption"> | Date | string
    facebookLink?: StringFilter<"Adoption"> | string
    validId?: StringNullableFilter<"Adoption"> | string | null
    petStayingPhoto?: StringNullableFilter<"Adoption"> | string | null
    selfie?: StringNullableFilter<"Adoption"> | string | null
    archived?: BoolFilter<"Adoption"> | boolean
    petId?: StringFilter<"Adoption"> | string
    userId?: StringFilter<"Adoption"> | string
    status?: StringNullableFilter<"Adoption"> | string | null
  }, "id">

  export type AdoptionOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    existingPets?: SortOrder
    visitDate?: SortOrder
    agreeToAdopt?: SortOrder
    promiseToCare?: SortOrder
    acceptTerms?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    contractDate?: SortOrder
    facebookLink?: SortOrder
    validId?: SortOrder
    petStayingPhoto?: SortOrder
    selfie?: SortOrder
    archived?: SortOrder
    petId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    _count?: AdoptionCountOrderByAggregateInput
    _max?: AdoptionMaxOrderByAggregateInput
    _min?: AdoptionMinOrderByAggregateInput
  }

  export type AdoptionScalarWhereWithAggregatesInput = {
    AND?: AdoptionScalarWhereWithAggregatesInput | AdoptionScalarWhereWithAggregatesInput[]
    OR?: AdoptionScalarWhereWithAggregatesInput[]
    NOT?: AdoptionScalarWhereWithAggregatesInput | AdoptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Adoption"> | string
    email?: StringWithAggregatesFilter<"Adoption"> | string
    fullName?: StringWithAggregatesFilter<"Adoption"> | string
    petType?: StringWithAggregatesFilter<"Adoption"> | string
    petName?: StringWithAggregatesFilter<"Adoption"> | string
    existingPets?: StringWithAggregatesFilter<"Adoption"> | string
    visitDate?: DateTimeWithAggregatesFilter<"Adoption"> | Date | string
    agreeToAdopt?: BoolWithAggregatesFilter<"Adoption"> | boolean
    promiseToCare?: BoolWithAggregatesFilter<"Adoption"> | boolean
    acceptTerms?: BoolWithAggregatesFilter<"Adoption"> | boolean
    address?: StringWithAggregatesFilter<"Adoption"> | string
    contactNumber?: StringWithAggregatesFilter<"Adoption"> | string
    contractDate?: DateTimeWithAggregatesFilter<"Adoption"> | Date | string
    facebookLink?: StringWithAggregatesFilter<"Adoption"> | string
    validId?: StringNullableWithAggregatesFilter<"Adoption"> | string | null
    petStayingPhoto?: StringNullableWithAggregatesFilter<"Adoption"> | string | null
    selfie?: StringNullableWithAggregatesFilter<"Adoption"> | string | null
    archived?: BoolWithAggregatesFilter<"Adoption"> | boolean
    petId?: StringWithAggregatesFilter<"Adoption"> | string
    userId?: StringWithAggregatesFilter<"Adoption"> | string
    status?: StringNullableWithAggregatesFilter<"Adoption"> | string | null
  }

  export type PetRequestWhereInput = {
    AND?: PetRequestWhereInput | PetRequestWhereInput[]
    OR?: PetRequestWhereInput[]
    NOT?: PetRequestWhereInput | PetRequestWhereInput[]
    id?: StringFilter<"PetRequest"> | string
    email?: StringFilter<"PetRequest"> | string
    fullName?: StringFilter<"PetRequest"> | string
    contactNumber?: StringFilter<"PetRequest"> | string
    date?: DateTimeFilter<"PetRequest"> | Date | string
    type?: StringFilter<"PetRequest"> | string
    breed?: StringFilter<"PetRequest"> | string
    sex?: StringFilter<"PetRequest"> | string
    color?: StringFilter<"PetRequest"> | string
    agePreference?: StringFilter<"PetRequest"> | string
    createdAt?: DateTimeFilter<"PetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"PetRequest"> | Date | string
    archived?: BoolFilter<"PetRequest"> | boolean
    userId?: StringFilter<"PetRequest"> | string
    status?: StringNullableFilter<"PetRequest"> | string | null
  }

  export type PetRequestOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    contactNumber?: SortOrder
    date?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    sex?: SortOrder
    color?: SortOrder
    agePreference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type PetRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PetRequestWhereInput | PetRequestWhereInput[]
    OR?: PetRequestWhereInput[]
    NOT?: PetRequestWhereInput | PetRequestWhereInput[]
    email?: StringFilter<"PetRequest"> | string
    fullName?: StringFilter<"PetRequest"> | string
    contactNumber?: StringFilter<"PetRequest"> | string
    date?: DateTimeFilter<"PetRequest"> | Date | string
    type?: StringFilter<"PetRequest"> | string
    breed?: StringFilter<"PetRequest"> | string
    sex?: StringFilter<"PetRequest"> | string
    color?: StringFilter<"PetRequest"> | string
    agePreference?: StringFilter<"PetRequest"> | string
    createdAt?: DateTimeFilter<"PetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"PetRequest"> | Date | string
    archived?: BoolFilter<"PetRequest"> | boolean
    userId?: StringFilter<"PetRequest"> | string
    status?: StringNullableFilter<"PetRequest"> | string | null
  }, "id">

  export type PetRequestOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    contactNumber?: SortOrder
    date?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    sex?: SortOrder
    color?: SortOrder
    agePreference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    _count?: PetRequestCountOrderByAggregateInput
    _max?: PetRequestMaxOrderByAggregateInput
    _min?: PetRequestMinOrderByAggregateInput
  }

  export type PetRequestScalarWhereWithAggregatesInput = {
    AND?: PetRequestScalarWhereWithAggregatesInput | PetRequestScalarWhereWithAggregatesInput[]
    OR?: PetRequestScalarWhereWithAggregatesInput[]
    NOT?: PetRequestScalarWhereWithAggregatesInput | PetRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PetRequest"> | string
    email?: StringWithAggregatesFilter<"PetRequest"> | string
    fullName?: StringWithAggregatesFilter<"PetRequest"> | string
    contactNumber?: StringWithAggregatesFilter<"PetRequest"> | string
    date?: DateTimeWithAggregatesFilter<"PetRequest"> | Date | string
    type?: StringWithAggregatesFilter<"PetRequest"> | string
    breed?: StringWithAggregatesFilter<"PetRequest"> | string
    sex?: StringWithAggregatesFilter<"PetRequest"> | string
    color?: StringWithAggregatesFilter<"PetRequest"> | string
    agePreference?: StringWithAggregatesFilter<"PetRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PetRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PetRequest"> | Date | string
    archived?: BoolWithAggregatesFilter<"PetRequest"> | boolean
    userId?: StringWithAggregatesFilter<"PetRequest"> | string
    status?: StringNullableWithAggregatesFilter<"PetRequest"> | string | null
  }

  export type AdoptWhereInput = {
    AND?: AdoptWhereInput | AdoptWhereInput[]
    OR?: AdoptWhereInput[]
    NOT?: AdoptWhereInput | AdoptWhereInput[]
    id?: StringFilter<"Adopt"> | string
    name?: StringFilter<"Adopt"> | string
    type?: StringFilter<"Adopt"> | string
    breed?: StringFilter<"Adopt"> | string
    adopter?: StringFilter<"Adopt"> | string
    address?: StringFilter<"Adopt"> | string
    contact?: StringFilter<"Adopt"> | string
    date?: DateTimeFilter<"Adopt"> | Date | string
  }

  export type AdoptOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    adopter?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    date?: SortOrder
  }

  export type AdoptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdoptWhereInput | AdoptWhereInput[]
    OR?: AdoptWhereInput[]
    NOT?: AdoptWhereInput | AdoptWhereInput[]
    name?: StringFilter<"Adopt"> | string
    type?: StringFilter<"Adopt"> | string
    breed?: StringFilter<"Adopt"> | string
    adopter?: StringFilter<"Adopt"> | string
    address?: StringFilter<"Adopt"> | string
    contact?: StringFilter<"Adopt"> | string
    date?: DateTimeFilter<"Adopt"> | Date | string
  }, "id">

  export type AdoptOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    adopter?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    date?: SortOrder
    _count?: AdoptCountOrderByAggregateInput
    _max?: AdoptMaxOrderByAggregateInput
    _min?: AdoptMinOrderByAggregateInput
  }

  export type AdoptScalarWhereWithAggregatesInput = {
    AND?: AdoptScalarWhereWithAggregatesInput | AdoptScalarWhereWithAggregatesInput[]
    OR?: AdoptScalarWhereWithAggregatesInput[]
    NOT?: AdoptScalarWhereWithAggregatesInput | AdoptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Adopt"> | string
    name?: StringWithAggregatesFilter<"Adopt"> | string
    type?: StringWithAggregatesFilter<"Adopt"> | string
    breed?: StringWithAggregatesFilter<"Adopt"> | string
    adopter?: StringWithAggregatesFilter<"Adopt"> | string
    address?: StringWithAggregatesFilter<"Adopt"> | string
    contact?: StringWithAggregatesFilter<"Adopt"> | string
    date?: DateTimeWithAggregatesFilter<"Adopt"> | Date | string
  }

  export type DonationWhereInput = {
    AND?: DonationWhereInput | DonationWhereInput[]
    OR?: DonationWhereInput[]
    NOT?: DonationWhereInput | DonationWhereInput[]
    id?: StringFilter<"Donation"> | string
    name?: StringFilter<"Donation"> | string
    date?: DateTimeFilter<"Donation"> | Date | string
    amount?: FloatFilter<"Donation"> | number
    reference?: IntFilter<"Donation"> | number
    payment?: StringFilter<"Donation"> | string
  }

  export type DonationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    reference?: SortOrder
    payment?: SortOrder
  }

  export type DonationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DonationWhereInput | DonationWhereInput[]
    OR?: DonationWhereInput[]
    NOT?: DonationWhereInput | DonationWhereInput[]
    name?: StringFilter<"Donation"> | string
    date?: DateTimeFilter<"Donation"> | Date | string
    amount?: FloatFilter<"Donation"> | number
    reference?: IntFilter<"Donation"> | number
    payment?: StringFilter<"Donation"> | string
  }, "id">

  export type DonationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    reference?: SortOrder
    payment?: SortOrder
    _count?: DonationCountOrderByAggregateInput
    _avg?: DonationAvgOrderByAggregateInput
    _max?: DonationMaxOrderByAggregateInput
    _min?: DonationMinOrderByAggregateInput
    _sum?: DonationSumOrderByAggregateInput
  }

  export type DonationScalarWhereWithAggregatesInput = {
    AND?: DonationScalarWhereWithAggregatesInput | DonationScalarWhereWithAggregatesInput[]
    OR?: DonationScalarWhereWithAggregatesInput[]
    NOT?: DonationScalarWhereWithAggregatesInput | DonationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Donation"> | string
    name?: StringWithAggregatesFilter<"Donation"> | string
    date?: DateTimeWithAggregatesFilter<"Donation"> | Date | string
    amount?: FloatWithAggregatesFilter<"Donation"> | number
    reference?: IntWithAggregatesFilter<"Donation"> | number
    payment?: StringWithAggregatesFilter<"Donation"> | string
  }

  export type AdminCreateInput = {
    id?: string
    fullname?: string | null
    username: string
    email: string
    password: string
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    fullname?: string | null
    username: string
    email: string
    password: string
  }

  export type AdminUpdateInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: string
    fullname?: string | null
    username: string
    email: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    validId?: string | null
    selfieId?: string | null
    fullname?: string | null
    username: string
    email: string
    password: string
    contact?: string | null
    facebookLink?: string | null
    petowner?: string | null
    address?: string | null
    accountStatus?: string | null
    createdAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    validId?: string | null
    selfieId?: string | null
    fullname?: string | null
    username: string
    email: string
    password: string
    contact?: string | null
    facebookLink?: string | null
    petowner?: string | null
    address?: string | null
    accountStatus?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateInput = {
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfieId?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    facebookLink?: NullableStringFieldUpdateOperationsInput | string | null
    petowner?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfieId?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    facebookLink?: NullableStringFieldUpdateOperationsInput | string | null
    petowner?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    validId?: string | null
    selfieId?: string | null
    fullname?: string | null
    username: string
    email: string
    password: string
    contact?: string | null
    facebookLink?: string | null
    petowner?: string | null
    address?: string | null
    accountStatus?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfieId?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    facebookLink?: NullableStringFieldUpdateOperationsInput | string | null
    petowner?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfieId?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    facebookLink?: NullableStringFieldUpdateOperationsInput | string | null
    petowner?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    userId?: string | null
    type?: string | null
    content?: string | null
    sender?: string | null
    recipient?: string | null
    timestamp?: Date | string
    status?: string | null
    link?: string | null
    metadata?: InputJsonValue | null
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId?: string | null
    type?: string | null
    content?: string | null
    sender?: string | null
    recipient?: string | null
    timestamp?: Date | string
    status?: string | null
    link?: string | null
    metadata?: InputJsonValue | null
  }

  export type NotificationUpdateInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: InputJsonValue | InputJsonValue | null
  }

  export type NotificationUncheckedUpdateInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: InputJsonValue | InputJsonValue | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId?: string | null
    type?: string | null
    content?: string | null
    sender?: string | null
    recipient?: string | null
    timestamp?: Date | string
    status?: string | null
    link?: string | null
    metadata?: InputJsonValue | null
  }

  export type NotificationUpdateManyMutationInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: InputJsonValue | InputJsonValue | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: InputJsonValue | InputJsonValue | null
  }

  export type PetCreateInput = {
    id?: string
    name: string
    breed: string
    age: number
    color: string
    gender: string
    description?: string | null
    petType?: string | null
    image?: string | null
    image2?: string | null
    image3?: string | null
    image4?: string | null
    adopter?: string | null
    adopted?: boolean
  }

  export type PetUncheckedCreateInput = {
    id?: string
    name: string
    breed: string
    age: number
    color: string
    gender: string
    description?: string | null
    petType?: string | null
    image?: string | null
    image2?: string | null
    image3?: string | null
    image4?: string | null
    adopter?: string | null
    adopted?: boolean
  }

  export type PetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    petType?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    image2?: NullableStringFieldUpdateOperationsInput | string | null
    image3?: NullableStringFieldUpdateOperationsInput | string | null
    image4?: NullableStringFieldUpdateOperationsInput | string | null
    adopter?: NullableStringFieldUpdateOperationsInput | string | null
    adopted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    petType?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    image2?: NullableStringFieldUpdateOperationsInput | string | null
    image3?: NullableStringFieldUpdateOperationsInput | string | null
    image4?: NullableStringFieldUpdateOperationsInput | string | null
    adopter?: NullableStringFieldUpdateOperationsInput | string | null
    adopted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetCreateManyInput = {
    id?: string
    name: string
    breed: string
    age: number
    color: string
    gender: string
    description?: string | null
    petType?: string | null
    image?: string | null
    image2?: string | null
    image3?: string | null
    image4?: string | null
    adopter?: string | null
    adopted?: boolean
  }

  export type PetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    petType?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    image2?: NullableStringFieldUpdateOperationsInput | string | null
    image3?: NullableStringFieldUpdateOperationsInput | string | null
    image4?: NullableStringFieldUpdateOperationsInput | string | null
    adopter?: NullableStringFieldUpdateOperationsInput | string | null
    adopted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    petType?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    image2?: NullableStringFieldUpdateOperationsInput | string | null
    image3?: NullableStringFieldUpdateOperationsInput | string | null
    image4?: NullableStringFieldUpdateOperationsInput | string | null
    adopter?: NullableStringFieldUpdateOperationsInput | string | null
    adopted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReportCreateInput = {
    id?: string
    completeLocation: string
    landmark: string
    petstatus: string
    email: string
    phone: string
    petImage?: string | null
    message: string
    archived?: boolean
    reportstatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    status?: string | null
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    completeLocation: string
    landmark: string
    petstatus: string
    email: string
    phone: string
    petImage?: string | null
    message: string
    archived?: boolean
    reportstatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    status?: string | null
  }

  export type ReportUpdateInput = {
    completeLocation?: StringFieldUpdateOperationsInput | string
    landmark?: StringFieldUpdateOperationsInput | string
    petstatus?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    petImage?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    reportstatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUncheckedUpdateInput = {
    completeLocation?: StringFieldUpdateOperationsInput | string
    landmark?: StringFieldUpdateOperationsInput | string
    petstatus?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    petImage?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    reportstatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCreateManyInput = {
    id?: string
    completeLocation: string
    landmark: string
    petstatus: string
    email: string
    phone: string
    petImage?: string | null
    message: string
    archived?: boolean
    reportstatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    status?: string | null
  }

  export type ReportUpdateManyMutationInput = {
    completeLocation?: StringFieldUpdateOperationsInput | string
    landmark?: StringFieldUpdateOperationsInput | string
    petstatus?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    petImage?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    reportstatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUncheckedUpdateManyInput = {
    completeLocation?: StringFieldUpdateOperationsInput | string
    landmark?: StringFieldUpdateOperationsInput | string
    petstatus?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    petImage?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    reportstatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SurrenderCreateInput = {
    id?: string
    email: string
    date: Date | string
    ownerName: string
    contact: string
    fullAddress: string
    petType: string
    petName: string
    dateOfBirth: Date | string
    breed: string
    color: string
    sex: string
    spayedNeutered: string
    vaccinated: string
    medicalConcerns: string
    currentMedicalIssues: string
    aggression: string
    biting: string
    leashCageTrained: string
    goodWithOtherPets: string
    goodWithChildren: string
    indoorOutdoor: string
    paymentMethod: string
    agreementAccepted: boolean
    validId?: string | null
    selfie?: string | null
    petpic?: string | null
    archived?: boolean
    userId: string
    status?: string | null
  }

  export type SurrenderUncheckedCreateInput = {
    id?: string
    email: string
    date: Date | string
    ownerName: string
    contact: string
    fullAddress: string
    petType: string
    petName: string
    dateOfBirth: Date | string
    breed: string
    color: string
    sex: string
    spayedNeutered: string
    vaccinated: string
    medicalConcerns: string
    currentMedicalIssues: string
    aggression: string
    biting: string
    leashCageTrained: string
    goodWithOtherPets: string
    goodWithChildren: string
    indoorOutdoor: string
    paymentMethod: string
    agreementAccepted: boolean
    validId?: string | null
    selfie?: string | null
    petpic?: string | null
    archived?: boolean
    userId: string
    status?: string | null
  }

  export type SurrenderUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    fullAddress?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    breed?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    spayedNeutered?: StringFieldUpdateOperationsInput | string
    vaccinated?: StringFieldUpdateOperationsInput | string
    medicalConcerns?: StringFieldUpdateOperationsInput | string
    currentMedicalIssues?: StringFieldUpdateOperationsInput | string
    aggression?: StringFieldUpdateOperationsInput | string
    biting?: StringFieldUpdateOperationsInput | string
    leashCageTrained?: StringFieldUpdateOperationsInput | string
    goodWithOtherPets?: StringFieldUpdateOperationsInput | string
    goodWithChildren?: StringFieldUpdateOperationsInput | string
    indoorOutdoor?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    agreementAccepted?: BoolFieldUpdateOperationsInput | boolean
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    petpic?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SurrenderUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    fullAddress?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    breed?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    spayedNeutered?: StringFieldUpdateOperationsInput | string
    vaccinated?: StringFieldUpdateOperationsInput | string
    medicalConcerns?: StringFieldUpdateOperationsInput | string
    currentMedicalIssues?: StringFieldUpdateOperationsInput | string
    aggression?: StringFieldUpdateOperationsInput | string
    biting?: StringFieldUpdateOperationsInput | string
    leashCageTrained?: StringFieldUpdateOperationsInput | string
    goodWithOtherPets?: StringFieldUpdateOperationsInput | string
    goodWithChildren?: StringFieldUpdateOperationsInput | string
    indoorOutdoor?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    agreementAccepted?: BoolFieldUpdateOperationsInput | boolean
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    petpic?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SurrenderCreateManyInput = {
    id?: string
    email: string
    date: Date | string
    ownerName: string
    contact: string
    fullAddress: string
    petType: string
    petName: string
    dateOfBirth: Date | string
    breed: string
    color: string
    sex: string
    spayedNeutered: string
    vaccinated: string
    medicalConcerns: string
    currentMedicalIssues: string
    aggression: string
    biting: string
    leashCageTrained: string
    goodWithOtherPets: string
    goodWithChildren: string
    indoorOutdoor: string
    paymentMethod: string
    agreementAccepted: boolean
    validId?: string | null
    selfie?: string | null
    petpic?: string | null
    archived?: boolean
    userId: string
    status?: string | null
  }

  export type SurrenderUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    fullAddress?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    breed?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    spayedNeutered?: StringFieldUpdateOperationsInput | string
    vaccinated?: StringFieldUpdateOperationsInput | string
    medicalConcerns?: StringFieldUpdateOperationsInput | string
    currentMedicalIssues?: StringFieldUpdateOperationsInput | string
    aggression?: StringFieldUpdateOperationsInput | string
    biting?: StringFieldUpdateOperationsInput | string
    leashCageTrained?: StringFieldUpdateOperationsInput | string
    goodWithOtherPets?: StringFieldUpdateOperationsInput | string
    goodWithChildren?: StringFieldUpdateOperationsInput | string
    indoorOutdoor?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    agreementAccepted?: BoolFieldUpdateOperationsInput | boolean
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    petpic?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SurrenderUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    fullAddress?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    breed?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    spayedNeutered?: StringFieldUpdateOperationsInput | string
    vaccinated?: StringFieldUpdateOperationsInput | string
    medicalConcerns?: StringFieldUpdateOperationsInput | string
    currentMedicalIssues?: StringFieldUpdateOperationsInput | string
    aggression?: StringFieldUpdateOperationsInput | string
    biting?: StringFieldUpdateOperationsInput | string
    leashCageTrained?: StringFieldUpdateOperationsInput | string
    goodWithOtherPets?: StringFieldUpdateOperationsInput | string
    goodWithChildren?: StringFieldUpdateOperationsInput | string
    indoorOutdoor?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    agreementAccepted?: BoolFieldUpdateOperationsInput | boolean
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    petpic?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactFormEntryCreateInput = {
    id?: string
    name: string
    email: string
    phone: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactFormEntryUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phone: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactFormEntryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormEntryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormEntryCreateManyInput = {
    id?: string
    name: string
    email: string
    phone: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactFormEntryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormEntryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdoptionCreateInput = {
    id?: string
    email: string
    fullName: string
    petType: string
    petName: string
    existingPets: string
    visitDate: Date | string
    agreeToAdopt: boolean
    promiseToCare: boolean
    acceptTerms: boolean
    address: string
    contactNumber: string
    contractDate: Date | string
    facebookLink: string
    validId?: string | null
    petStayingPhoto?: string | null
    selfie?: string | null
    archived?: boolean
    petId: string
    userId: string
    status?: string | null
  }

  export type AdoptionUncheckedCreateInput = {
    id?: string
    email: string
    fullName: string
    petType: string
    petName: string
    existingPets: string
    visitDate: Date | string
    agreeToAdopt: boolean
    promiseToCare: boolean
    acceptTerms: boolean
    address: string
    contactNumber: string
    contractDate: Date | string
    facebookLink: string
    validId?: string | null
    petStayingPhoto?: string | null
    selfie?: string | null
    archived?: boolean
    petId: string
    userId: string
    status?: string | null
  }

  export type AdoptionUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    existingPets?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    agreeToAdopt?: BoolFieldUpdateOperationsInput | boolean
    promiseToCare?: BoolFieldUpdateOperationsInput | boolean
    acceptTerms?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    facebookLink?: StringFieldUpdateOperationsInput | string
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    petStayingPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    petId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdoptionUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    existingPets?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    agreeToAdopt?: BoolFieldUpdateOperationsInput | boolean
    promiseToCare?: BoolFieldUpdateOperationsInput | boolean
    acceptTerms?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    facebookLink?: StringFieldUpdateOperationsInput | string
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    petStayingPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    petId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdoptionCreateManyInput = {
    id?: string
    email: string
    fullName: string
    petType: string
    petName: string
    existingPets: string
    visitDate: Date | string
    agreeToAdopt: boolean
    promiseToCare: boolean
    acceptTerms: boolean
    address: string
    contactNumber: string
    contractDate: Date | string
    facebookLink: string
    validId?: string | null
    petStayingPhoto?: string | null
    selfie?: string | null
    archived?: boolean
    petId: string
    userId: string
    status?: string | null
  }

  export type AdoptionUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    existingPets?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    agreeToAdopt?: BoolFieldUpdateOperationsInput | boolean
    promiseToCare?: BoolFieldUpdateOperationsInput | boolean
    acceptTerms?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    facebookLink?: StringFieldUpdateOperationsInput | string
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    petStayingPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    petId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdoptionUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petName?: StringFieldUpdateOperationsInput | string
    existingPets?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    agreeToAdopt?: BoolFieldUpdateOperationsInput | boolean
    promiseToCare?: BoolFieldUpdateOperationsInput | boolean
    acceptTerms?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    facebookLink?: StringFieldUpdateOperationsInput | string
    validId?: NullableStringFieldUpdateOperationsInput | string | null
    petStayingPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    selfie?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    petId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PetRequestCreateInput = {
    id?: string
    email: string
    fullName: string
    contactNumber: string
    date: Date | string
    type: string
    breed: string
    sex: string
    color: string
    agePreference: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archived?: boolean
    userId: string
    status?: string | null
  }

  export type PetRequestUncheckedCreateInput = {
    id?: string
    email: string
    fullName: string
    contactNumber: string
    date: Date | string
    type: string
    breed: string
    sex: string
    color: string
    agePreference: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archived?: boolean
    userId: string
    status?: string | null
  }

  export type PetRequestUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    agePreference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PetRequestUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    agePreference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PetRequestCreateManyInput = {
    id?: string
    email: string
    fullName: string
    contactNumber: string
    date: Date | string
    type: string
    breed: string
    sex: string
    color: string
    agePreference: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archived?: boolean
    userId: string
    status?: string | null
  }

  export type PetRequestUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    agePreference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PetRequestUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    agePreference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdoptCreateInput = {
    id?: string
    name: string
    type: string
    breed: string
    adopter: string
    address: string
    contact: string
    date: Date | string
  }

  export type AdoptUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    breed: string
    adopter: string
    address: string
    contact: string
    date: Date | string
  }

  export type AdoptUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    adopter?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdoptUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    adopter?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdoptCreateManyInput = {
    id?: string
    name: string
    type: string
    breed: string
    adopter: string
    address: string
    contact: string
    date: Date | string
  }

  export type AdoptUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    adopter?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdoptUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    adopter?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationCreateInput = {
    id?: string
    name: string
    date: Date | string
    amount: number
    reference: number
    payment: string
  }

  export type DonationUncheckedCreateInput = {
    id?: string
    name: string
    date: Date | string
    amount: number
    reference: number
    payment: string
  }

  export type DonationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    reference?: IntFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
  }

  export type DonationUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    reference?: IntFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
  }

  export type DonationCreateManyInput = {
    id?: string
    name: string
    date: Date | string
    amount: number
    reference: number
    payment: string
  }

  export type DonationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    reference?: IntFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
  }

  export type DonationUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    reference?: IntFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    validId?: SortOrder
    selfieId?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    contact?: SortOrder
    facebookLink?: SortOrder
    petowner?: SortOrder
    address?: SortOrder
    accountStatus?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    validId?: SortOrder
    selfieId?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    contact?: SortOrder
    facebookLink?: SortOrder
    petowner?: SortOrder
    address?: SortOrder
    accountStatus?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    validId?: SortOrder
    selfieId?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    contact?: SortOrder
    facebookLink?: SortOrder
    petowner?: SortOrder
    address?: SortOrder
    accountStatus?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    link?: SortOrder
    metadata?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    link?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    link?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    color?: SortOrder
    gender?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    image?: SortOrder
    image2?: SortOrder
    image3?: SortOrder
    image4?: SortOrder
    adopter?: SortOrder
    adopted?: SortOrder
  }

  export type PetAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type PetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    color?: SortOrder
    gender?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    image?: SortOrder
    image2?: SortOrder
    image3?: SortOrder
    image4?: SortOrder
    adopter?: SortOrder
    adopted?: SortOrder
  }

  export type PetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    color?: SortOrder
    gender?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    image?: SortOrder
    image2?: SortOrder
    image3?: SortOrder
    image4?: SortOrder
    adopter?: SortOrder
    adopted?: SortOrder
  }

  export type PetSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    completeLocation?: SortOrder
    landmark?: SortOrder
    petstatus?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    petImage?: SortOrder
    message?: SortOrder
    archived?: SortOrder
    reportstatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    completeLocation?: SortOrder
    landmark?: SortOrder
    petstatus?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    petImage?: SortOrder
    message?: SortOrder
    archived?: SortOrder
    reportstatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    completeLocation?: SortOrder
    landmark?: SortOrder
    petstatus?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    petImage?: SortOrder
    message?: SortOrder
    archived?: SortOrder
    reportstatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type SurrenderCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    date?: SortOrder
    ownerName?: SortOrder
    contact?: SortOrder
    fullAddress?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    dateOfBirth?: SortOrder
    breed?: SortOrder
    color?: SortOrder
    sex?: SortOrder
    spayedNeutered?: SortOrder
    vaccinated?: SortOrder
    medicalConcerns?: SortOrder
    currentMedicalIssues?: SortOrder
    aggression?: SortOrder
    biting?: SortOrder
    leashCageTrained?: SortOrder
    goodWithOtherPets?: SortOrder
    goodWithChildren?: SortOrder
    indoorOutdoor?: SortOrder
    paymentMethod?: SortOrder
    agreementAccepted?: SortOrder
    validId?: SortOrder
    selfie?: SortOrder
    petpic?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type SurrenderMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    date?: SortOrder
    ownerName?: SortOrder
    contact?: SortOrder
    fullAddress?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    dateOfBirth?: SortOrder
    breed?: SortOrder
    color?: SortOrder
    sex?: SortOrder
    spayedNeutered?: SortOrder
    vaccinated?: SortOrder
    medicalConcerns?: SortOrder
    currentMedicalIssues?: SortOrder
    aggression?: SortOrder
    biting?: SortOrder
    leashCageTrained?: SortOrder
    goodWithOtherPets?: SortOrder
    goodWithChildren?: SortOrder
    indoorOutdoor?: SortOrder
    paymentMethod?: SortOrder
    agreementAccepted?: SortOrder
    validId?: SortOrder
    selfie?: SortOrder
    petpic?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type SurrenderMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    date?: SortOrder
    ownerName?: SortOrder
    contact?: SortOrder
    fullAddress?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    dateOfBirth?: SortOrder
    breed?: SortOrder
    color?: SortOrder
    sex?: SortOrder
    spayedNeutered?: SortOrder
    vaccinated?: SortOrder
    medicalConcerns?: SortOrder
    currentMedicalIssues?: SortOrder
    aggression?: SortOrder
    biting?: SortOrder
    leashCageTrained?: SortOrder
    goodWithOtherPets?: SortOrder
    goodWithChildren?: SortOrder
    indoorOutdoor?: SortOrder
    paymentMethod?: SortOrder
    agreementAccepted?: SortOrder
    validId?: SortOrder
    selfie?: SortOrder
    petpic?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type ContactFormEntryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactFormEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactFormEntryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdoptionCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    existingPets?: SortOrder
    visitDate?: SortOrder
    agreeToAdopt?: SortOrder
    promiseToCare?: SortOrder
    acceptTerms?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    contractDate?: SortOrder
    facebookLink?: SortOrder
    validId?: SortOrder
    petStayingPhoto?: SortOrder
    selfie?: SortOrder
    archived?: SortOrder
    petId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type AdoptionMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    existingPets?: SortOrder
    visitDate?: SortOrder
    agreeToAdopt?: SortOrder
    promiseToCare?: SortOrder
    acceptTerms?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    contractDate?: SortOrder
    facebookLink?: SortOrder
    validId?: SortOrder
    petStayingPhoto?: SortOrder
    selfie?: SortOrder
    archived?: SortOrder
    petId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type AdoptionMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    petType?: SortOrder
    petName?: SortOrder
    existingPets?: SortOrder
    visitDate?: SortOrder
    agreeToAdopt?: SortOrder
    promiseToCare?: SortOrder
    acceptTerms?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    contractDate?: SortOrder
    facebookLink?: SortOrder
    validId?: SortOrder
    petStayingPhoto?: SortOrder
    selfie?: SortOrder
    archived?: SortOrder
    petId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type PetRequestCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    contactNumber?: SortOrder
    date?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    sex?: SortOrder
    color?: SortOrder
    agePreference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type PetRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    contactNumber?: SortOrder
    date?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    sex?: SortOrder
    color?: SortOrder
    agePreference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type PetRequestMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    contactNumber?: SortOrder
    date?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    sex?: SortOrder
    color?: SortOrder
    agePreference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archived?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type AdoptCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    adopter?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    date?: SortOrder
  }

  export type AdoptMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    adopter?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    date?: SortOrder
  }

  export type AdoptMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    adopter?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    date?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DonationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    reference?: SortOrder
    payment?: SortOrder
  }

  export type DonationAvgOrderByAggregateInput = {
    amount?: SortOrder
    reference?: SortOrder
  }

  export type DonationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    reference?: SortOrder
    payment?: SortOrder
  }

  export type DonationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    reference?: SortOrder
    payment?: SortOrder
  }

  export type DonationSumOrderByAggregateInput = {
    amount?: SortOrder
    reference?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetDefaultArgs instead
     */
    export type PetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SurrenderDefaultArgs instead
     */
    export type SurrenderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SurrenderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactFormEntryDefaultArgs instead
     */
    export type ContactFormEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactFormEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdoptionDefaultArgs instead
     */
    export type AdoptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdoptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetRequestDefaultArgs instead
     */
    export type PetRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdoptDefaultArgs instead
     */
    export type AdoptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdoptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DonationDefaultArgs instead
     */
    export type DonationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DonationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}