<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="../images/mp-ico.png" type="image/x-icon">
    <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
    <title>Admin Donations</title>
</head>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', sans-serif;
    }

    :root {
        --primary-color: #FF8E8E;
        --panel-color: #FFF;
        --text-color: #000;
        --black-light-color: #707070;
        --border-color: #e6e5e5;
        --toggle-color: #DDD;
        --box1-color: #4DA3FF;
        --box2-color: #FFE6AC;
        --box3-color: #E7D1FC;
        --title-icon-color: #fff;

        /* ====== Transition ====== */
        --tran-05: all 0.5s ease;
        --tran-03: all 0.3s ease;
        --tran-03: all 0.2s ease;
    }

    body {
        min-height: 100vh;
        background-color: #ffff;
    }

    body.dark {
        --primary-color: #3A3B3C;
        --panel-color: #242526;
        --text-color: #CCC;
        --black-light-color: #CCC;
        --border-color: #4D4C4C;
        --toggle-color: #FFF;
        --box1-color: #3A3B3C;
        --box2-color: #3A3B3C;
        --box3-color: #3A3B3C;
        --title-icon-color: #CCC;
    }

    /* === Custom Scroll Bar CSS === */
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    ::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: #0b3cc1;
    }

    body.dark::-webkit-scrollbar-thumb:hover,
    body.dark .activity-data::-webkit-scrollbar-thumb:hover {
        background: #3A3B3C;
    }

    nav {
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width: 250px;
        padding: 10px 14px;
        background-color: var(--panel-color);
        border-right: 1px solid var(--border-color);
        transition: var(--tran-05);
    }

    nav.close {
        width: 73px;
    }

    nav .logo-name {
        display: flex;
        align-items: center;
    }

    nav .logo-image {
        display: flex;
        justify-content: center;
        min-width: 45px;
    }

    nav .logo-image img {
        width: 40px;
        object-fit: cover;
        border-radius: 50%;
    }

    nav .logo-name .logo_name {
        font-size: 22px;
        font-weight: 600;
        color: var(--text-color);
        margin-left: 14px;
        transition: var(--tran-05);
    }

    nav.close .logo_name {
        opacity: 0;
        pointer-events: none;
    }

    nav .menu-items {
        margin-top: 40px;
        height: calc(100% - 90px);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .menu-items li {
        list-style: none;
    }

    .menu-items li a {
        display: flex;
        align-items: center;
        height: 50px;
        text-decoration: none;
        position: relative;
    }

    .nav-links li a:hover:before {
        content: "";
        position: absolute;
        left: -7px;
        height: 5px;
        width: 5px;
        border-radius: 50%;
        background-color: var(--primary-color);
    }

    body.dark li a:hover:before {
        background-color: var(--text-color);
    }

    .menu-items li a i {
        font-size: 24px;
        min-width: 45px;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--black-light-color);
    }

    .menu-items li a .link-name {
        font-size: 18px;
        font-weight: 400;
        color: var(--black-light-color);
        transition: var(--tran-05);
    }

    nav.close li a .link-name {
        opacity: 0;
        pointer-events: none;
    }

    .nav-links li a:hover i,
    .nav-links li a:hover .link-name {
        color: var(--text-color);
        font-weight: bold;
    }

    .nav-links .active a {
        background-color: var(--primary-color);
        border-radius: 5px;
    }

    .nav-links .active a i,
    .nav-links .active a .link-name {
        color: var(--text-color);
    }

    .nav-links .active a:hover {
        background-color: #FF9999;
        color: var(--panel-color) !important;
    }


    body.dark .nav-links li a:hover i,
    body.dark .nav-links li a:hover .link-name {
        color: var(--text-color);
    }

    .menu-items .logout-mode {
        padding-top: 10px;
        border-top: 1px solid var(--border-color);
    }

    .menu-items .mode {
        display: flex;
        align-items: center;
        white-space: nowrap;
    }

    .menu-items .mode-toggle {
        position: absolute;
        right: 14px;
        height: 50px;
        min-width: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .mode-toggle .switch {
        position: relative;
        display: inline-block;
        height: 22px;
        width: 40px;
        border-radius: 25px;
        background-color: var(--toggle-color);
    }

    .switch:before {
        content: "";
        position: absolute;
        left: 5px;
        top: 50%;
        transform: translateY(-50%);
        height: 15px;
        width: 15px;
        background-color: var(--panel-color);
        border-radius: 50%;
        transition: var(--tran-03);
    }

    body.dark .switch:before {
        left: 20px;
    }

    .dashboard {
        position: relative;
        left: 250px;
        background-color: var(--panel-color);
        min-height: 100vh;
        width: calc(100% - 250px);
        padding: 10px 14px;
        transition: var(--tran-05);

        top: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--panel-color);
        z-index: 10;

        overflow-y: auto;
    }

    nav.close~.dashboard {
        left: 73px;
        width: calc(100% - 73px);
    }


    .top {
        position: fixed;
        top: 0;
        left: 250px;
        padding: 10px 14px;
        transition: var(--tran-05);

    }

    nav.close~.dashboard .top {
        left: 73px;
        width: calc(100% - 73px);
    }

    .top .sidebar-toggle {
        font-size: 26px;
        color: var(--text-color);
        cursor: pointer;
    }

    .top .search-box {
        position: relative;
        height: 45px;
        max-width: 600px;
        width: 100%;
        margin: 0 30px;
    }

    .top .search-box input {
        position: absolute;
        border: 1px solid var(--border-color);
        background-color: var(--panel-color);
        padding: 0 25px 0 50px;
        border-radius: 5px;
        height: 100%;
        width: 100%;
        color: var(--text-color);
        font-size: 15px;
        font-weight: 400;
        outline: none;
    }

    .top .search-box i {
        position: absolute;
        left: 15px;
        font-size: 22px;
        z-index: 10;
        top: 50%;
        transform: translateY(-50%);
        color: var(--black-light-color);
    }

    .top img {
        width: 40px;
        border-radius: 50%;
    }

    .dash-content {
        padding-top: 50px;
    }

    .dash-content .title {
        display: flex;
        align-items: center;
        margin: 60px 0 30px 0;
    }

    .dash-content .title i {
        position: relative;
        height: 35px;
        width: 35px;
        background-color: var(--primary-color);
        border-radius: 6px;
        color: var(--title-icon-color);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
    }

    .dash-content .title .text {
        font-size: 24px;
        font-weight: 500;
        color: var(--text-color);
        margin-left: 10px;
    }

    .dash-content .boxes {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
    }

    .dash-content .boxes .box {
        display: flex;
        flex-direction: column;
        align-items: center;
        border-radius: 12px;
        width: calc(100% / 3 - 15px);
        padding: 15px 20px;
        background-color: var(--box1-color);
        transition: var(--tran-05);
    }

    .boxes .box i {
        font-size: 35px;
        color: var(--text-color);
    }

    .boxes .box .text {
        white-space: nowrap;
        font-size: 18px;
        font-weight: 500;
        color: var(--text-color);
    }

    .boxes .box .number {
        font-size: 40px;
        font-weight: 500;
        color: var(--text-color);
    }

    .boxes .box.box2 {
        background-color: var(--box2-color);
    }

    .boxes .box.box3 {
        background-color: var(--box3-color);
    }

    .dash-content .activity .activity-data {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .activity .activity-data {
        display: flex;
    }

    .activity-data .data {
        display: flex;
        flex-direction: column;
        margin: 0 15px;
    }

    .activity-data .data-title {
        font-size: 20px;
        font-weight: 500;
        color: var(--text-color);
    }

    .activity-data .data .data-list {
        font-size: 18px;
        font-weight: 400;
        margin-top: 20px;
        white-space: nowrap;
        color: var(--text-color);
    }

    @media (max-width: 1000px) {
        nav {
            width: 73px;
        }

        nav.close {
            width: 250px;
        }

        nav .logo_name {
            opacity: 0;
            pointer-events: none;
        }

        nav.close .logo_name {
            opacity: 1;
            pointer-events: auto;
        }

        nav li a .link-name {
            opacity: 0;
            pointer-events: none;
        }

        nav.close li a .link-name {
            opacity: 1;
            pointer-events: auto;
        }

        nav~.dashboard {
            left: 73px;
            width: calc(100% - 73px);
        }

        nav.close~.dashboard {
            left: 250px;
            width: calc(100% - 250px);
        }

        nav~.dashboard .top {
            left: 73px;
            width: calc(100% - 73px);
        }

        nav.close~.dashboard .top {
            left: 250px;
            width: calc(100% - 250px);
        }

        .activity .activity-data {
            overflow-X: scroll;
        }
    }

    @media (max-width: 780px) {
        .dash-content .boxes .box {
            width: calc(100% / 2 - 15px);
            margin-top: 15px;
        }
    }

    @media (max-width: 560px) {
        .dash-content .boxes .box {
            width: 100%;
        }
    }

    @media (max-width: 400px) {
        nav {
            width: 0px;
        }

        nav.close {
            width: 73px;
        }

        nav .logo_name {
            opacity: 0;
            pointer-events: none;
        }

        nav.close .logo_name {
            opacity: 0;
            pointer-events: none;
        }

        nav li a .link-name {
            opacity: 0;
            pointer-events: none;
        }

        nav.close li a .link-name {
            opacity: 0;
            pointer-events: none;
        }

        nav~.dashboard {
            left: 0;
            width: 100%;
        }

        nav.close~.dashboard {
            left: 73px;
            width: calc(100% - 73px);
        }

        nav~.dashboard .top {
            left: 0;
            width: 100%;
        }

        nav.close~.dashboard .top {
            left: 0;
            width: 100%;
        }
    }

    /* Styles for submenu */
    ul.nav-links li {
        position: relative;
        /* Set parent li to relative */
    }

    ul.nav-links li ul.submenu {
        display: none;
        position: absolute;
        background-color: #fff;
        /* Change background color as needed */
        padding: 10px;
        top: 100%;
        /* Position below the parent */
        left: 0;
        /* Align with parent */
        z-index: 999;
        /* Higher z-index to bring it in front */
        width: 300px;
        /* Set the width of the submenu */
        border: 1px solid #ccc;
        /* Add border to the submenu */

    }

    /* Set width for submenu items */
    ul.nav-links li ul.submenu li {
        width: 100%;
        /* Set the width of submenu items */
        border-bottom: 1px solid #ddd;
        /* Add bottom border to submenu items */
    }

    /* Styles for submenu links */
    ul.nav-links li ul.submenu li a {
        display: block;
        text-decoration: none;
        color: #333;
        /* Link color */
        padding: 8px 16px;
        font-family: 'Poppins', sans-serif;
    }

    /* Additional styling as needed */

    /* Ensure the submenu is at the top level */
    ul.submenu {
        position: absolute;
        top: 0;
        left: 0;
    }

    .dashboard {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
    }

    .dashboard>div {
        margin-bottom: 30px;
        width: 80%;

    }

    /* Container Styles */
    .donation-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-container {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    }

    /* Form Styles */
    .donation-entry {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .donation-entry h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    input,
    select,
    button {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button[type="submit"] {
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button[type="submit"]:hover {
        background-color: #0056b3;
    }

    /* Other Section Styles */
    .total-donations,
    .donations-graph,
    .donation-history {
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    }

    #totalDonationsDiv button {
        margin-top: 20px;
        width: 200px;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }


    #totalDonationsDiv button:hover {
        background-color: #0056b3;
        color: #fff;
    }

    .sort-options button {
        margin-top: 20px;
        width: 200px;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }


    .sort-options button:hover {
        background-color: #0056b3;
        color: #FFF;
    }

    .container {
        margin-top: 2%;
    }

    .delete-donation {
        transition: background-color 0.3s ease;
        cursor: pointer;
        width: 200px;
        margin-top: 20px;
    }

    .delete-donation:hover {
        background-color: #cc0000;
        color: #FFF;
    }
</style>

<body>
    <nav>
        <div class="logo-name">
            <div class="logo-image">
                <img src="../images/icon.jpg" alt="">
            </div>
            <span class="logo_name">Welcome, Admin!</span>
        </div>
        <div class="menu-items">
            <ul class="nav-links">
                <li><a href="/admin/admindashboard">
                    <i class="uil uil-estate"></i>
                    <span class="link-name">Dashboard</span>
                </a></li>
                <li><a href="/admin/list-users">
                    <i class="uil uil-files-landscapes"></i>
                    <span class="link-name">Manage Users</span>
                </a></li>
                
            <li><a href="/admin/list-pets">
                    <i class="uil uil-files-landscapes"></i>
                    <span class="link-name">Manage Pets</span>
                </a></li>
            <li><a href="/admin/adminadoptions">
                    <i class="uil uil-envelope-check"></i>
                    <span class="link-name">Pet requests </span>
                </a></li>
            <li><a href="/admin/adminrequests">
                    <i class="uil uil-chart"></i>
                    <span class="link-name">Adoptions</span>
                </a></li>
            <li><a href="/admin/adminreport">
                    <i class="uil uil-phone-volume"></i>
                    <span class="link-name">Reports</span>
                </a></li>
            <li><a href="/admin/admindonate">
                    <i class="uil uil-heartbeat"></i>
                    <span class="link-name">Donations</span>
                </a></li>
            <li><a href="/admin/adminsurrender">
                    <i class="uil uil-frown"></i>
                    <span class="link-name">Surrender</span>
                </a></li>
                <li class="archives">
                    <a href="#" class="dropdown-toggle">
                        <i class="uil uil-archive"></i>
                        <span class="link-name">Archives</span>
                    </a>
                    <ul class="submenu">
                        <li><a href="/admin/requestarchives/requestarchives">Pet Adoption</a></li>
                        <li><a href="/admin/surrenderarchives/surrenderarchives">Surrender Applications</a></li>
                        <li><a href="/admin/petrequestarchives/petrequestarchives">Pet Requests</a></li>
                        <li><a href="/admin/reportarchives/reportarchives">Pet Reports</a></li>
                        <li><a href="/admin/adoptedarchives/adoptedarchives">Adopted Pets</a></li>
                        <!-- Add more archive links as needed -->
                    </ul>
                </li>
            </ul>
            <ul class="logout-mode">
                <li>
                    <a href="#" onclick="performLogout()">
                        <i class="uil uil-signout"></i>
                        <span class="link-name">Logout</span>
                    </a>
                </li>
                <li>
                    <a type="submit" onclick="location.href='/admin/signup'"></atype>
                        <i class="uil uil-user-plus"></i>
                        <span class="link-name">Create Another Admin</span>
                    </a>
                    <div class="mode-toggle">
                        <span class="switch"></span>
                    </div>
                </li>
            </ul>
        </div>
    </nav>
    <section class="dashboard">
        <div class="top">
            <i class="uil uil-bars sidebar-toggle"></i>

        </div>
        <div class="container">
            <div class="donation-container">
                <div class="form-container">

                    <form id="donationForm" class="donation-entry" action="/admin/add-donation" method="POST">
                        <center>
                            <h1>Admin Donation Entry</h1>
                        </center>
                        <label for="name">Name:</label>
                        <input type="text" id="name" name="name" required>
                        <label for="amount">Amount:</label>
                        <input type="number" id="amount" name="amount" step="0.01" required>
                        <label for="reference">Reference:</label>
                        <input type="number" id="reference" name="reference" required>
                        <label for="payment">Payment Method:</label>
                        <select id="payment" name="payment" required>
                            <option value="" disabled selected>Select Mode of Payment</option>
                            <option value="PayPal">PayPal</option>
                            <option value="Gcash">Gcash</option>
                            <option value="Paymaya">Paymaya</option>
                            <option value="Komo">Komo</option>
                            <!-- Add other payment methods as needed -->
                        </select>
                        <label for="date">Date:</label>
                        <input type="date" id="date" name="date" required>
                        <button type="submit">Add Donation</button>
                    </form>

                </div>

                <!-- ... [other HTML code above] ... -->

                <div id="totalDonationsDiv" class="total-donations">
                    <span>Total Donations:</span>
                    <span id="totalDonations">0</span>
                    <center>
                        <div>
                            <button id="showAllDonations">Show All</button>
                            <button id="showThisMonthDonations">This Month</button>
                        </div>
                    </center>
                </div>

                <!-- ... [other HTML code below] ... -->


                <div>
                    <center>
                        <h2>Donations Graph</h2>
                    </center>
                    <canvas id="donationsChart" class="donations-graph"></canvas>
                </div>

                <!-- ... [other HTML code above] ... -->
                <div class="donation-history">
                    <h2>Donation History</h2>
                    <center>
                        <div class="sort-options">
                            <button onclick="sortHistory('newest')">Newest First</button>
                            <button onclick="sortHistory('oldest')">Oldest First</button>
                        </div>
                        <div id="donationHistory"></div>
                </div>
                </center>
                <!-- ... [other HTML code below] ... -->
            </div>

        </div>
    </section>



    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.getElementById('donationForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const name = document.getElementById('name').value;
            const amount = document.getElementById('amount').value;
            const reference = document.getElementById('reference').value;
            const payment = document.getElementById('payment').value;
            const date = document.getElementById('date').value;

            try {
                const response = await fetch('/admin/add-donation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name, amount, reference, payment, date }),
                });

                if (response.ok) {
                    // Handle successful donation addition here if needed
                    // For example, update UI elements or display a success message
                    console.log('Donation added successfully!');
                } else {
                    // Handle error response from the server
                    console.error('Unable to add donation');
                }
            } catch (error) {
                // Handle network errors or fetch-related issues
                console.error('Failed to send donation data:', error);
            }
        });

    </script>
    <script>

        // Initialize the donations array from local storage if it exists or empty if it doesn't
        let donations = JSON.parse(localStorage.getItem('donations')) || [];

        // Function to update the total donations display
        const updateTotalDonations = () => {
            const total = donations.reduce((sum, donation) => sum + donation.amount, 0);
            document.getElementById('totalDonations').textContent = total.toFixed(2);
        };

        // ... [other JavaScript code above] ...

        // Function to calculate donations for the current month
        const calculateThisMonthDonations = () => {
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            return donations.filter(donation => {
                const donationDate = new Date(donation.date);
                return donationDate.getMonth() === currentMonth && donationDate.getFullYear() === currentYear;
            }).reduce((sum, donation) => sum + donation.amount, 0);
        };

        // Function to update the displayed total donations
        const updateDisplayedTotalDonations = (total) => {
            document.getElementById('totalDonations').textContent = total.toFixed(2);
        };

        document.getElementById('showAllDonations').addEventListener('click', () => {
            const totalDonations = donations.reduce((sum, donation) => sum + donation.amount, 0);
            updateDisplayedTotalDonations(totalDonations);
        });

        document.getElementById('showThisMonthDonations').addEventListener('click', () => {
            const totalThisMonth = calculateThisMonthDonations();
            updateDisplayedTotalDonations(totalThisMonth);
        });

        // Initially display the total for all donations
        const totalDonations = donations.reduce((sum, donation) => sum + donation.amount, 0);
        updateDisplayedTotalDonations(totalDonations);

        // ... [other JavaScript code below] ...


        // Function to update the graph
        const updateGraph = () => {
            const ctx = document.getElementById('donationsChart').getContext('2d');
            const labels = donations.map(donation => donation.date);
            const name = donations.map(donation => donation.name);
            const data = donations.map(donation => donation.amount);
            const ref = donations.map(donation => donation.reference);
            const methods = donations.map(donation => donation.payment);

            // If the chart exists, destroy it so we can recreate it with the new data
            if (window.myDonationsChart) {
                window.myDonationsChart.destroy();
            }

            window.myDonationsChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Donations',
                        backgroundColor: 'rgba(0, 123, 255, 0.5)',
                        borderColor: 'rgba(0, 123, 255, 1)',
                        data: data,
                        fill: false,
                    }],
                },
                options: {
                    responsive: true,
                    tooltips: {
                        // Enable tooltips
                        enabled: true,
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            // Custom tooltip label
                            label: function (tooltipItem, data) {
                                let label = data.datasets[tooltipItem.datasetIndex].label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += `₱${tooltipItem.yLabel.toFixed(2)}`;
                                return label;
                            },
                            // Custom tooltip after label
                            afterLabel: function (tooltipItem, data) {
                                const method = methods[tooltipItem.index];
                                const date = labels[tooltipItem.index];
                                return ['Date: ' + date, 'Method: ' + method];
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        /// Function to update the history list
        const updateHistory = () => {
            // Sort donations based on currentSort value
            donations.sort((a, b) => {
                return currentSort === 'newest'
                    ? new Date(b.date) - new Date(a.date)
                    : new Date(a.date) - new Date(b.date);
            });

            const historyElement = document.getElementById('donationHistory');
            historyElement.innerHTML = ''; // Clear the history list

            // Append each donation to the history list with a delete button
            donations.forEach((donation, index) => {
                const donationEntry = document.createElement('div');
                donationEntry.classList.add('history-entry');
                donationEntry.innerHTML = `
            <strong><br>Donor: </strong> ${donation.name} <br> <strong>Date:</strong> ${donation.date} <br> <strong>Amount:</strong> ${donation.amount.toFixed(2)} <br> <strong>Reference No.:</strong> ${donation.reference} <br> <strong>Payment Method: </strong>${donation.payment}
           <br> <br>
        `;
                historyElement.appendChild(donationEntry);
            });

            // Add event listeners to the delete buttons
            document.querySelectorAll('.delete-donation').forEach(button => {
                button.addEventListener('click', function () {
                    const index = this.getAttribute('data-index');
                    deleteDonation(index);
                });
            });
        };

        // Function to delete a donation
        const deleteDonation = (index) => {
            // Confirm before deleting
            if (!confirm('Are you sure you want to delete this donation?')) {
                return;
            }

            // Remove the donation from the array
            donations.splice(index, 1);

            // Update local storage
            localStorage.setItem('donations', JSON.stringify(donations));

            // Update the display
            updateHistory();
            updateGraph();
            updateDisplayedTotalDonations(calculateTotalDonations());
            updateThisMonthDonations();
        };

        // Function to calculate the total donations
        const calculateTotalDonations = () => {
            return donations.reduce((sum, donation) => sum + donation.amount, 0);
        };


        // Function to sort the history
        const sortHistory = (order) => {
            currentSort = order;
            updateHistory();
        };

        // Set today's date as the default value for the date input
        document.getElementById('date').valueAsDate = new Date();

        // Event listener for the form submission
        document.getElementById('donationForm').addEventListener('submit', (event) => {
            event.preventDefault();

            // Retrieve the form values
            const date = document.getElementById('date').value;
            const amount = parseFloat(document.getElementById('amount').value);
            const payment = document.getElementById('payment').value;
            const name = document.getElementById('name').value;
            const reference = parseFloat(document.getElementById('reference').value);

            // Add the new donation to the donations array
            donations.push({ date, amount, payment, name, reference });

            // Store the updated donations array in local storage
            localStorage.setItem('donations', JSON.stringify(donations));

            // Update the graph and history list
            updateGraph();
            updateHistory();

            // Update total donations
            updateTotalDonations();
        });


        // Initial call to update the graph, total donations, and history list when the page loads
        updateGraph();
        updateTotalDonations();
        updateHistory();

        const body = document.querySelector("body"),
            modeToggle = body.querySelector(".mode-toggle");
        sidebar = body.querySelector("nav");
        sidebarToggle = body.querySelector(".sidebar-toggle");

        let getMode = localStorage.getItem("mode");
        if (getMode && getMode === "dark") {
            body.classList.toggle("dark");
        }

        let getStatus = localStorage.getItem("status");
        if (getStatus && getStatus === "close") {
            sidebar.classList.toggle("close");
        }

        modeToggle.addEventListener("click", () => {
            body.classList.toggle("dark");
            if (body.classList.contains("dark")) {
                localStorage.setItem("mode", "dark");
            } else {
                localStorage.setItem("mode", "light");
            }
        });

        sidebarToggle.addEventListener("click", () => {
            sidebar.classList.toggle("close");
            if (sidebar.classList.contains("close")) {
                localStorage.setItem("status", "close");
            } else {
                localStorage.setItem("status", "open");
            }
        })

        const currentUrl = window.location.pathname;
        const navLinks = document.querySelectorAll('.nav-links a');

        navLinks.forEach(link => {
            const linkHref = link.getAttribute('href');
            if (currentUrl === linkHref) {
                link.parentElement.classList.add('active');
            }
        });

    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.archives .dropdown-toggle').click(function (e) {
                e.preventDefault();
                $('.archives .submenu').toggle();
            });

            // Close the submenu if clicking outside of it
            $(document).on('click', function (e) {
                if (!$(e.target).closest('.archives').length) {
                    $('.archives .submenu').hide();
                }
            });
        });
    </script>

    <script>
        function performLogout() {
            // Show a loading state (optional)
            // For example, change the link text to 'Logging out...'
            const logoutLink = document.querySelector('.logout-mode a');
            logoutLink.innerHTML = '<i class="uil uil-spinner"></i> Logging out...';

            // Simulate a delay of 2 seconds before redirecting to the login page
            setTimeout(function () {
                window.location.href = '/admin/login';
            }, 2000); // Adjust the delay time (in milliseconds) as needed
        }
    </script>


</body>

</html>